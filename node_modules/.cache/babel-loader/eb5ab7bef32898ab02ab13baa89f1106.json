{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar reportException = require(\"./runtime-script-errors\");\n\nvar Event = require(\"../generated/Event\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar MutationRecord = require(\"../generated/MutationRecord\");\n\nvar MUTATION_TYPE = {\n  ATTRIBUTES: \"attributes\",\n  CHARACTER_DATA: \"characterData\",\n  CHILD_LIST: \"childList\"\n}; // Note:\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\n// we will approximate that the following properties are global for now.\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\n\nvar mutationObserverMicrotaskQueueFlag = false; // Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\n// before notifying the mutation observers.\n\nvar activeMutationObservers = new Set(); // https://dom.spec.whatwg.org/#signal-slot-list\n\nvar signalSlotList = []; // https://dom.spec.whatwg.org/#queue-a-mutation-record\n\nfunction queueMutationRecord(type, target, name, namespace, oldValue, addedNodes, removedNodes, previousSibling, nextSibling) {\n  var interestedObservers = new Map();\n  var nodes = domSymbolTree.ancestorsToArray(target);\n\n  var _iterator = _createForOfIteratorHelper(nodes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n\n      var _iterator3 = _createForOfIteratorHelper(node._registeredObserverList),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var registered = _step3.value;\n          var options = registered.options,\n              mo = registered.observer;\n\n          if (!(node !== target && options.subtree === false) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter && !options.attributeFilter.some(function (value) {\n            return value === name || value === namespace;\n          })) && !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) && !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)) {\n            if (!interestedObservers.has(mo)) {\n              interestedObservers.set(mo, null);\n            }\n\n            if (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true || type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true) {\n              interestedObservers.set(mo, oldValue);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(interestedObservers.entries()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          observer = _step2$value[0],\n          mappedOldValue = _step2$value[1];\n\n      var record = MutationRecord.createImpl(target._globalObject, [], {\n        type: type,\n        target: target,\n        attributeName: name,\n        attributeNamespace: namespace,\n        oldValue: mappedOldValue,\n        addedNodes: addedNodes,\n        removedNodes: removedNodes,\n        previousSibling: previousSibling,\n        nextSibling: nextSibling\n      });\n\n      observer._recordQueue.push(record);\n\n      activeMutationObservers.add(observer);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  queueMutationObserverMicrotask();\n} // https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\n\n\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\n  queueMutationRecord(MUTATION_TYPE.CHILD_LIST, target, null, null, null, addedNodes, removedNodes, previousSibling, nextSibling);\n} // https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\n\n\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\n  queueMutationRecord(MUTATION_TYPE.ATTRIBUTES, target, name, namespace, oldValue, [], [], null, null);\n} // https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\n\n\nfunction queueMutationObserverMicrotask() {\n  if (mutationObserverMicrotaskQueueFlag) {\n    return;\n  }\n\n  mutationObserverMicrotaskQueueFlag = true;\n  Promise.resolve().then(function () {\n    notifyMutationObservers();\n  });\n} // https://dom.spec.whatwg.org/#notify-mutation-observers\n\n\nfunction notifyMutationObservers() {\n  mutationObserverMicrotaskQueueFlag = false;\n\n  var notifyList = _toConsumableArray(activeMutationObservers).sort(function (a, b) {\n    return a._id - b._id;\n  });\n\n  activeMutationObservers.clear();\n  var signalList = [].concat(signalSlotList);\n  signalSlotList.splice(0, signalSlotList.length);\n\n  var _iterator4 = _createForOfIteratorHelper(notifyList),\n      _step4;\n\n  try {\n    var _loop = function _loop() {\n      var mo = _step4.value;\n\n      var records = _toConsumableArray(mo._recordQueue);\n\n      mo._recordQueue = [];\n\n      var _iterator6 = _createForOfIteratorHelper(mo._nodeList),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var node = _step6.value;\n          node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {\n            return registeredObserver.source !== mo;\n          });\n\n          if (records.length) {\n            try {\n              mo._callback(records.map(idlUtils.wrapperForImpl), idlUtils.wrapperForImpl(mo));\n            } catch (e) {\n              var target = records[0].target;\n              var window = target._ownerDocument._defaultView;\n              reportException(window, e);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    };\n\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  var _iterator5 = _createForOfIteratorHelper(signalList),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var slot = _step5.value;\n      var slotChangeEvent = Event.createImpl(slot._globalObject, [\"slotchange\", {\n        bubbles: true\n      }], {\n        isTrusted: true\n      });\n\n      slot._dispatch(slotChangeEvent);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n}\n\nmodule.exports = {\n  MUTATION_TYPE: MUTATION_TYPE,\n  queueMutationRecord: queueMutationRecord,\n  queueTreeMutationRecord: queueTreeMutationRecord,\n  queueAttributeMutationRecord: queueAttributeMutationRecord,\n  queueMutationObserverMicrotask: queueMutationObserverMicrotask,\n  signalSlotList: signalSlotList\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js"],"names":["require","domSymbolTree","reportException","Event","idlUtils","MutationRecord","MUTATION_TYPE","ATTRIBUTES","CHARACTER_DATA","CHILD_LIST","mutationObserverMicrotaskQueueFlag","activeMutationObservers","Set","signalSlotList","queueMutationRecord","type","target","name","namespace","oldValue","addedNodes","removedNodes","previousSibling","nextSibling","interestedObservers","Map","nodes","ancestorsToArray","node","_registeredObserverList","registered","options","mo","observer","subtree","attributes","attributeFilter","some","value","characterData","childList","has","set","attributeOldValue","characterDataOldValue","entries","mappedOldValue","record","createImpl","_globalObject","attributeName","attributeNamespace","_recordQueue","push","add","queueMutationObserverMicrotask","queueTreeMutationRecord","queueAttributeMutationRecord","Promise","resolve","then","notifyMutationObservers","notifyList","sort","a","b","_id","clear","signalList","splice","length","records","_nodeList","filter","registeredObserver","source","_callback","map","wrapperForImpl","e","window","_ownerDocument","_defaultView","slot","slotChangeEvent","bubbles","isTrusted","_dispatch","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst reportException = require(\"./runtime-script-errors\");\n\nconst Event = require(\"../generated/Event\");\nconst idlUtils = require(\"../generated/utils\");\nconst MutationRecord = require(\"../generated/MutationRecord\");\n\nconst MUTATION_TYPE = {\n  ATTRIBUTES: \"attributes\",\n  CHARACTER_DATA: \"characterData\",\n  CHILD_LIST: \"childList\"\n};\n\n// Note:\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\n// we will approximate that the following properties are global for now.\n\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\nlet mutationObserverMicrotaskQueueFlag = false;\n\n// Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\n// before notifying the mutation observers.\nconst activeMutationObservers = new Set();\n\n// https://dom.spec.whatwg.org/#signal-slot-list\nconst signalSlotList = [];\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-record\nfunction queueMutationRecord(\n  type,\n  target,\n  name,\n  namespace,\n  oldValue,\n  addedNodes,\n  removedNodes,\n  previousSibling,\n  nextSibling\n) {\n  const interestedObservers = new Map();\n\n  const nodes = domSymbolTree.ancestorsToArray(target);\n\n  for (const node of nodes) {\n    for (const registered of node._registeredObserverList) {\n      const { options, observer: mo } = registered;\n\n      if (\n        !(node !== target && options.subtree === false) &&\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) &&\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter &&\n          !options.attributeFilter.some(value => value === name || value === namespace)) &&\n        !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) &&\n        !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)\n      ) {\n        if (!interestedObservers.has(mo)) {\n          interestedObservers.set(mo, null);\n        }\n\n        if (\n          (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true) ||\n          (type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true)\n        ) {\n          interestedObservers.set(mo, oldValue);\n        }\n      }\n    }\n  }\n\n  for (const [observer, mappedOldValue] of interestedObservers.entries()) {\n    const record = MutationRecord.createImpl(target._globalObject, [], {\n      type,\n      target,\n      attributeName: name,\n      attributeNamespace: namespace,\n      oldValue: mappedOldValue,\n      addedNodes,\n      removedNodes,\n      previousSibling,\n      nextSibling\n    });\n\n    observer._recordQueue.push(record);\n    activeMutationObservers.add(observer);\n  }\n\n  queueMutationObserverMicrotask();\n}\n\n// https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\n  queueMutationRecord(\n    MUTATION_TYPE.CHILD_LIST,\n    target,\n    null,\n    null,\n    null,\n    addedNodes,\n    removedNodes,\n    previousSibling,\n    nextSibling\n  );\n}\n\n// https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\n  queueMutationRecord(\n    MUTATION_TYPE.ATTRIBUTES,\n    target,\n    name,\n    namespace,\n    oldValue,\n    [],\n    [],\n    null,\n    null\n  );\n}\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\nfunction queueMutationObserverMicrotask() {\n  if (mutationObserverMicrotaskQueueFlag) {\n    return;\n  }\n\n  mutationObserverMicrotaskQueueFlag = true;\n\n  Promise.resolve().then(() => {\n    notifyMutationObservers();\n  });\n}\n\n// https://dom.spec.whatwg.org/#notify-mutation-observers\nfunction notifyMutationObservers() {\n  mutationObserverMicrotaskQueueFlag = false;\n\n  const notifyList = [...activeMutationObservers].sort((a, b) => a._id - b._id);\n  activeMutationObservers.clear();\n\n  const signalList = [...signalSlotList];\n  signalSlotList.splice(0, signalSlotList.length);\n\n  for (const mo of notifyList) {\n    const records = [...mo._recordQueue];\n    mo._recordQueue = [];\n\n    for (const node of mo._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.source !== mo;\n      });\n\n      if (records.length) {\n        try {\n          mo._callback(\n            records.map(idlUtils.wrapperForImpl),\n            idlUtils.wrapperForImpl(mo)\n          );\n        } catch (e) {\n          const { target } = records[0];\n          const window = target._ownerDocument._defaultView;\n\n          reportException(window, e);\n        }\n      }\n    }\n  }\n\n  for (const slot of signalList) {\n    const slotChangeEvent = Event.createImpl(\n      slot._globalObject,\n      [\n        \"slotchange\",\n        { bubbles: true }\n      ],\n      { isTrusted: true }\n    );\n\n    slot._dispatch(slotChangeEvent);\n  }\n}\n\nmodule.exports = {\n  MUTATION_TYPE,\n\n  queueMutationRecord,\n  queueTreeMutationRecord,\n  queueAttributeMutationRecord,\n\n  queueMutationObserverMicrotask,\n\n  signalSlotList\n};\n"]},"metadata":{},"sourceType":"script"}
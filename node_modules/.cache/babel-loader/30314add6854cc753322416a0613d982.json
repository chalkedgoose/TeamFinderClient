{"ast":null,"code":"\"use strict\";\n\nvar produceXMLSerialization = require(\"w3c-xmlserializer\");\n\nvar parse5 = require(\"parse5\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar utils = require(\"../generated/utils\");\n\nvar treeAdapter = require(\"./parse5-adapter-serialization\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar NAMESPACES = require(\"../helpers/namespaces\");\n\nfunction htmlSerialization(node) {\n  if (node.nodeType === NODE_TYPE.ELEMENT_NODE && node.namespaceURI === NAMESPACES.HTML_NS && node.tagName === \"TEMPLATE\") {\n    node = node.content;\n  }\n\n  return parse5.serialize(node, {\n    treeAdapter: treeAdapter\n  });\n}\n\nmodule.exports.fragmentSerialization = function (node, _ref) {\n  var requireWellFormed = _ref.requireWellFormed,\n      globalObject = _ref.globalObject;\n  var contextDocument = node.nodeType === NODE_TYPE.DOCUMENT_NODE ? node : node._ownerDocument;\n\n  if (contextDocument._parsingMode === \"html\") {\n    return htmlSerialization(node);\n  }\n\n  var childNodes = node.childNodesForSerializing || node.childNodes;\n\n  try {\n    var serialized = \"\";\n\n    for (var i = 0; i < childNodes.length; ++i) {\n      serialized += produceXMLSerialization(utils.wrapperForImpl(childNodes[i] || childNodes.item(i)), {\n        requireWellFormed: requireWellFormed\n      });\n    }\n\n    return serialized;\n  } catch (e) {\n    throw DOMException.create(globalObject, [e.message, \"InvalidStateError\"]);\n  }\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/domparsing/serialization.js"],"names":["produceXMLSerialization","require","parse5","DOMException","utils","treeAdapter","NODE_TYPE","NAMESPACES","htmlSerialization","node","nodeType","ELEMENT_NODE","namespaceURI","HTML_NS","tagName","content","serialize","module","exports","fragmentSerialization","requireWellFormed","globalObject","contextDocument","DOCUMENT_NODE","_ownerDocument","_parsingMode","childNodes","childNodesForSerializing","serialized","i","length","wrapperForImpl","item","e","create","message"],"mappings":"AAAA;;AAEA,IAAMA,uBAAuB,GAAGC,OAAO,CAAC,mBAAD,CAAvC;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,gCAAD,CAA5B;;AAEA,IAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,gCAAD,CAA3B;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMM,UAAU,GAAGN,OAAO,CAAC,uBAAD,CAA1B;;AAEA,SAASO,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MACEA,IAAI,CAACC,QAAL,KAAkBJ,SAAS,CAACK,YAA5B,IACAF,IAAI,CAACG,YAAL,KAAsBL,UAAU,CAACM,OADjC,IAEAJ,IAAI,CAACK,OAAL,KAAiB,UAHnB,EAIE;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACM,OAAZ;AACD;;AAED,SAAOb,MAAM,CAACc,SAAP,CAAiBP,IAAjB,EAAuB;AAAEJ,IAAAA,WAAW,EAAXA;AAAF,GAAvB,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,CAAeC,qBAAf,GAAuC,UAACV,IAAD,QAA+C;AAAA,MAAtCW,iBAAsC,QAAtCA,iBAAsC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AACpF,MAAMC,eAAe,GACnBb,IAAI,CAACC,QAAL,KAAkBJ,SAAS,CAACiB,aAA5B,GAA4Cd,IAA5C,GAAmDA,IAAI,CAACe,cAD1D;;AAEA,MAAIF,eAAe,CAACG,YAAhB,KAAiC,MAArC,EAA6C;AAC3C,WAAOjB,iBAAiB,CAACC,IAAD,CAAxB;AACD;;AAED,MAAMiB,UAAU,GAAGjB,IAAI,CAACkB,wBAAL,IAAiClB,IAAI,CAACiB,UAAzD;;AAEA,MAAI;AACF,QAAIE,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;AAC1CD,MAAAA,UAAU,IAAI5B,uBAAuB,CACnCI,KAAK,CAAC2B,cAAN,CAAqBL,UAAU,CAACG,CAAD,CAAV,IAAiBH,UAAU,CAACM,IAAX,CAAgBH,CAAhB,CAAtC,CADmC,EAEnC;AAAET,QAAAA,iBAAiB,EAAjBA;AAAF,OAFmC,CAArC;AAID;;AACD,WAAOQ,UAAP;AACD,GATD,CASE,OAAOK,CAAP,EAAU;AACV,UAAM9B,YAAY,CAAC+B,MAAb,CAAoBb,YAApB,EAAkC,CAACY,CAAC,CAACE,OAAH,EAAY,mBAAZ,CAAlC,CAAN;AACD;AACF,CArBD","sourcesContent":["\"use strict\";\n\nconst produceXMLSerialization = require(\"w3c-xmlserializer\");\nconst parse5 = require(\"parse5\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst utils = require(\"../generated/utils\");\nconst treeAdapter = require(\"./parse5-adapter-serialization\");\nconst NODE_TYPE = require(\"../node-type\");\nconst NAMESPACES = require(\"../helpers/namespaces\");\n\nfunction htmlSerialization(node) {\n  if (\n    node.nodeType === NODE_TYPE.ELEMENT_NODE &&\n    node.namespaceURI === NAMESPACES.HTML_NS &&\n    node.tagName === \"TEMPLATE\"\n  ) {\n    node = node.content;\n  }\n\n  return parse5.serialize(node, { treeAdapter });\n}\n\nmodule.exports.fragmentSerialization = (node, { requireWellFormed, globalObject }) => {\n  const contextDocument =\n    node.nodeType === NODE_TYPE.DOCUMENT_NODE ? node : node._ownerDocument;\n  if (contextDocument._parsingMode === \"html\") {\n    return htmlSerialization(node);\n  }\n\n  const childNodes = node.childNodesForSerializing || node.childNodes;\n\n  try {\n    let serialized = \"\";\n    for (let i = 0; i < childNodes.length; ++i) {\n      serialized += produceXMLSerialization(\n        utils.wrapperForImpl(childNodes[i] || childNodes.item(i)),\n        { requireWellFormed }\n      );\n    }\n    return serialized;\n  } catch (e) {\n    throw DOMException.create(globalObject, [e.message, \"InvalidStateError\"]);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar enumerationValues = new Set([\"blob\", \"arraybuffer\"]);\nexports.enumerationValues = enumerationValues;\n\nexports.convert = function convert(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  var string = \"\".concat(value);\n\n  if (!enumerationValues.has(string)) {\n    throw new TypeError(\"\".concat(context, \" '\").concat(string, \"' is not a valid enumeration value for BinaryType\"));\n  }\n\n  return string;\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/generated/BinaryType.js"],"names":["enumerationValues","Set","exports","convert","value","context","string","has","TypeError"],"mappings":"AAAA;;AAEA,IAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,aAAT,CAAR,CAA1B;AACAC,OAAO,CAACF,iBAAR,GAA4BA,iBAA5B;;AAEAE,OAAO,CAACC,OAAR,GAAkB,SAASA,OAAT,CAAiBC,KAAjB,EAAiE;AAAA,iFAAJ,EAAI;AAAA,0BAAvCC,OAAuC;AAAA,MAAvCA,OAAuC,6BAA7B,oBAA6B;;AACjF,MAAMC,MAAM,aAAMF,KAAN,CAAZ;;AACA,MAAI,CAACJ,iBAAiB,CAACO,GAAlB,CAAsBD,MAAtB,CAAL,EAAoC;AAClC,UAAM,IAAIE,SAAJ,WAAiBH,OAAjB,eAA6BC,MAA7B,uDAAN;AACD;;AACD,SAAOA,MAAP;AACD,CAND","sourcesContent":["\"use strict\";\n\nconst enumerationValues = new Set([\"blob\", \"arraybuffer\"]);\nexports.enumerationValues = enumerationValues;\n\nexports.convert = function convert(value, { context = \"The provided value\" } = {}) {\n  const string = `${value}`;\n  if (!enumerationValues.has(string)) {\n    throw new TypeError(`${context} '${string}' is not a valid enumeration value for BinaryType`);\n  }\n  return string;\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../../browser/parser\"),\n    parseIntoDocument = _require.parseIntoDocument;\n\nvar Document = require(\"../generated/Document\");\n\nexports.implementation = /*#__PURE__*/function () {\n  function DOMParserImpl(globalObject) {\n    _classCallCheck(this, DOMParserImpl);\n\n    this._globalObject = globalObject;\n  }\n\n  _createClass(DOMParserImpl, [{\n    key: \"parseFromString\",\n    value: function parseFromString(string, contentType) {\n      switch (String(contentType)) {\n        case \"text/html\":\n          {\n            return this.createScriptingDisabledDocument(\"html\", contentType, string);\n          }\n\n        case \"text/xml\":\n        case \"application/xml\":\n        case \"application/xhtml+xml\":\n        case \"image/svg+xml\":\n          {\n            try {\n              return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n            } catch (error) {\n              var document = this.createScriptingDisabledDocument(\"xml\", contentType);\n              var element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n              element.textContent = error.message;\n              document.appendChild(element);\n              return document;\n            }\n          }\n\n        default:\n          throw new TypeError(\"Invalid contentType\");\n      }\n    }\n  }, {\n    key: \"createScriptingDisabledDocument\",\n    value: function createScriptingDisabledDocument(parsingMode, contentType, string) {\n      var document = Document.createImpl(this._globalObject, [], {\n        options: {\n          parsingMode: parsingMode,\n          encoding: \"UTF-8\",\n          contentType: contentType,\n          readyState: \"complete\",\n          scriptingDisabled: true // TODO: somehow set URL to active document's URL\n\n        }\n      });\n\n      if (string !== undefined) {\n        parseIntoDocument(string, document);\n      }\n\n      return document;\n    }\n  }]);\n\n  return DOMParserImpl;\n}();","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"names":["require","parseIntoDocument","Document","exports","implementation","globalObject","_globalObject","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","readyState","scriptingDisabled","undefined"],"mappings":"AAAA;;;;;;eAE8BA,OAAO,CAAC,sBAAD,C;IAA7BC,iB,YAAAA,iB;;AAER,IAAMC,QAAQ,GAAGF,OAAO,CAAC,uBAAD,CAAxB;;AAEAG,OAAO,CAACC,cAAR;AACE,yBAAYC,YAAZ,EAA0B;AAAA;;AACxB,SAAKC,aAAL,GAAqBD,YAArB;AACD;;AAHH;AAAA;AAAA,oCAKkBE,MALlB,EAK0BC,WAL1B,EAKuC;AACnC,cAAQC,MAAM,CAACD,WAAD,CAAd;AACE,aAAK,WAAL;AAAkB;AAChB,mBAAO,KAAKE,+BAAL,CAAqC,MAArC,EAA6CF,WAA7C,EAA0DD,MAA1D,CAAP;AACD;;AAED,aAAK,UAAL;AACA,aAAK,iBAAL;AACA,aAAK,uBAAL;AACA,aAAK,eAAL;AAAsB;AACpB,gBAAI;AACF,qBAAO,KAAKG,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,EAAyDD,MAAzD,CAAP;AACD,aAFD,CAEE,OAAOI,KAAP,EAAc;AACd,kBAAMC,QAAQ,GAAG,KAAKF,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,CAAjB;AACA,kBAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAT,CAAyB,sDAAzB,EAAiF,aAAjF,CAAhB;AAEAD,cAAAA,OAAO,CAACE,WAAR,GAAsBJ,KAAK,CAACK,OAA5B;AAEAJ,cAAAA,QAAQ,CAACK,WAAT,CAAqBJ,OAArB;AACA,qBAAOD,QAAP;AACD;AACF;;AAED;AACE,gBAAM,IAAIM,SAAJ,CAAc,qBAAd,CAAN;AAvBJ;AAyBD;AA/BH;AAAA;AAAA,oDAiCkCC,WAjClC,EAiC+CX,WAjC/C,EAiC4DD,MAjC5D,EAiCoE;AAChE,UAAMK,QAAQ,GAAGV,QAAQ,CAACkB,UAAT,CAAoB,KAAKd,aAAzB,EAAwC,EAAxC,EAA4C;AAC3De,QAAAA,OAAO,EAAE;AACPF,UAAAA,WAAW,EAAXA,WADO;AAEPG,UAAAA,QAAQ,EAAE,OAFH;AAGPd,UAAAA,WAAW,EAAXA,WAHO;AAIPe,UAAAA,UAAU,EAAE,UAJL;AAKPC,UAAAA,iBAAiB,EAAE,IALZ,CAMP;;AANO;AADkD,OAA5C,CAAjB;;AAWA,UAAIjB,MAAM,KAAKkB,SAAf,EAA0B;AACxBxB,QAAAA,iBAAiB,CAACM,MAAD,EAASK,QAAT,CAAjB;AACD;;AAED,aAAOA,QAAP;AACD;AAlDH;;AAAA;AAAA","sourcesContent":["\"use strict\";\n\nconst { parseIntoDocument } = require(\"../../browser/parser\");\n\nconst Document = require(\"../generated/Document\");\n\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\": {\n        return this.createScriptingDisabledDocument(\"html\", contentType, string);\n      }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\": {\n        try {\n          return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n        } catch (error) {\n          const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n\n          element.textContent = error.message;\n\n          document.appendChild(element);\n          return document;\n        }\n      }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true\n        // TODO: somehow set URL to active document's URL\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n\n    return document;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateNames = require(\"../helpers/validate-names\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS,\n    SVG_NS = _require.SVG_NS;\n\nvar _require2 = require(\"../helpers/create-element\"),\n    createElement = _require2.createElement,\n    internalCreateElementNSSteps = _require2.internalCreateElementNSSteps;\n\nvar DocumentType = require(\"../generated/DocumentType\");\n\nvar documents = require(\"../documents.js\");\n\nvar DOMImplementationImpl = /*#__PURE__*/function () {\n  function DOMImplementationImpl(globalObject, args, privateData) {\n    _classCallCheck(this, DOMImplementationImpl);\n\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  _createClass(DOMImplementationImpl, [{\n    key: \"hasFeature\",\n    value: function hasFeature() {\n      return true;\n    }\n  }, {\n    key: \"createDocumentType\",\n    value: function createDocumentType(qualifiedName, publicId, systemId) {\n      validateNames.qname(this._globalObject, qualifiedName);\n      return DocumentType.createImpl(this._globalObject, [], {\n        ownerDocument: this._ownerDocument,\n        name: qualifiedName,\n        publicId: publicId,\n        systemId: systemId\n      });\n    } // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n\n  }, {\n    key: \"createDocument\",\n    value: function createDocument(namespace, qualifiedName, doctype) {\n      var contentType = \"application/xml\";\n\n      if (namespace === HTML_NS) {\n        contentType = \"application/xhtml+xml\";\n      } else if (namespace === SVG_NS) {\n        contentType = \"image/svg+xml\";\n      }\n\n      var document = documents.createImpl(this._globalObject, {\n        contentType: contentType,\n        parsingMode: \"xml\",\n        encoding: \"UTF-8\"\n      });\n      var element = null;\n\n      if (qualifiedName !== \"\") {\n        element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n      }\n\n      if (doctype !== null) {\n        document.appendChild(doctype);\n      }\n\n      if (element !== null) {\n        document.appendChild(element);\n      }\n\n      document._origin = this._ownerDocument._origin;\n      return document;\n    } // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n\n  }, {\n    key: \"createHTMLDocument\",\n    value: function createHTMLDocument(title) {\n      // Let doc be a new document that is an HTML document.\n      // Set doc's content type to \"text/html\".\n      var document = documents.createImpl(this._globalObject, {\n        parsingMode: \"html\",\n        encoding: \"UTF-8\"\n      }); // Create a doctype, with \"html\" as its name and with its node document set\n      // to doc. Append the newly created node to doc.\n\n      var doctype = DocumentType.createImpl(this._globalObject, [], {\n        ownerDocument: document,\n        name: \"html\",\n        publicId: \"\",\n        systemId: \"\"\n      });\n      document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n      var htmlElement = createElement(document, \"html\", HTML_NS);\n      document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n      // element created in the previous step.\n\n      var headElement = createElement(document, \"head\", HTML_NS);\n      htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n      if (title !== undefined) {\n        // Create a title element in the HTML namespace, and append it to the head\n        // element created in the previous step.\n        var titleElement = createElement(document, \"title\", HTML_NS);\n        headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n        // string), and append it to the title element created in the previous step.\n\n        titleElement.appendChild(document.createTextNode(title));\n      } // Create a body element in the HTML namespace, and append it to the html\n      // element created in the earlier step.\n\n\n      var bodyElement = createElement(document, \"body\", HTML_NS);\n      htmlElement.appendChild(bodyElement); // doc's origin is an alias to the origin of the context object's associated\n      // document, and doc's effective script origin is an alias to the effective\n      // script origin of the context object's associated document.\n\n      return document;\n    }\n  }]);\n\n  return DOMImplementationImpl;\n}();\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation-impl.js"],"names":["validateNames","require","HTML_NS","SVG_NS","createElement","internalCreateElementNSSteps","DocumentType","documents","DOMImplementationImpl","globalObject","args","privateData","_globalObject","_ownerDocument","ownerDocument","qualifiedName","publicId","systemId","qname","createImpl","name","namespace","doctype","contentType","document","parsingMode","encoding","element","appendChild","_origin","title","htmlElement","headElement","undefined","titleElement","createTextNode","bodyElement","module","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { createElement, internalCreateElementNSSteps } = require(\"../helpers/create-element\");\nconst DocumentType = require(\"../generated/DocumentType\");\nconst documents = require(\"../documents.js\");\n\nclass DOMImplementationImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(this._globalObject, qualifiedName);\n\n    return DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = documents.createImpl(this._globalObject, {\n      contentType,\n      parsingMode: \"xml\",\n      encoding: \"UTF-8\"\n    });\n\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document._origin = this._ownerDocument._origin;\n\n    return document;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = documents.createImpl(this._globalObject, {\n      parsingMode: \"html\",\n      encoding: \"UTF-8\"\n    });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: document,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = createElement(document, \"html\", HTML_NS);\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = createElement(document, \"head\", HTML_NS);\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = createElement(document, \"title\", HTML_NS);\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    const bodyElement = createElement(document, \"body\", HTML_NS);\n    htmlElement.appendChild(bodyElement);\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _require = require(\"saxes\"),\n    SaxesParser = _require.SaxesParser;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar _require2 = require(\"../../living/helpers/create-element\"),\n    createElement = _require2.createElement;\n\nvar DocumentFragment = require(\"../../living/generated/DocumentFragment\");\n\nvar DocumentType = require(\"../../living/generated/DocumentType\");\n\nvar CDATASection = require(\"../../living/generated/CDATASection\");\n\nvar Comment = require(\"../../living/generated/Comment\");\n\nvar ProcessingInstruction = require(\"../../living/generated/ProcessingInstruction\");\n\nvar Text = require(\"../../living/generated/Text\");\n\nvar attributes = require(\"../../living/attributes\");\n\nvar _require3 = require(\"../../living/helpers/namespaces\"),\n    HTML_NS = _require3.HTML_NS;\n\nvar HTML5_DOCTYPE = /<!doctype html>/i;\nvar PUBLIC_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+public\\s+\"([^\"]+)\"\\s+\"([^\"]+)\"/i;\nvar SYSTEM_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+system\\s+\"([^\"]+)\"/i;\nvar CUSTOM_NAME_DOCTYPE = /<!doctype\\s+([^\\s>]+)/i;\n\nfunction parseDocType(globalObject, ownerDocument, html) {\n  if (HTML5_DOCTYPE.test(html)) {\n    return createDocumentType(globalObject, ownerDocument, \"html\", \"\", \"\");\n  }\n\n  var publicPieces = PUBLIC_DOCTYPE.exec(html);\n\n  if (publicPieces) {\n    return createDocumentType(globalObject, ownerDocument, publicPieces[1], publicPieces[2], publicPieces[3]);\n  }\n\n  var systemPieces = SYSTEM_DOCTYPE.exec(html);\n\n  if (systemPieces) {\n    return createDocumentType(globalObject, ownerDocument, systemPieces[1], \"\", systemPieces[2]);\n  }\n\n  var namePiece = CUSTOM_NAME_DOCTYPE.exec(html)[1] || \"html\";\n  return createDocumentType(globalObject, ownerDocument, namePiece, \"\", \"\");\n}\n\nfunction createDocumentType(globalObject, ownerDocument, name, publicId, systemId) {\n  return DocumentType.createImpl(globalObject, [], {\n    ownerDocument: ownerDocument,\n    name: name,\n    publicId: publicId,\n    systemId: systemId\n  });\n}\n\nfunction isHTMLTemplateElement(element) {\n  return element.tagName === \"template\" && element.namespaceURI === HTML_NS;\n}\n\nfunction createParser(rootNode, globalObject, saxesOptions) {\n  var parser = new SaxesParser(_objectSpread(_objectSpread({}, saxesOptions), {}, {\n    // Browsers always have namespace support.\n    xmlns: true,\n    // We force the parser to treat all documents (even documents declaring themselves to be XML 1.1 documents) as XML\n    // 1.0 documents. See https://github.com/jsdom/jsdom/issues/2677 for a discussion of the stakes.\n    defaultXMLVersion: \"1.0\",\n    forceXMLVersion: true\n  }));\n  var openStack = [rootNode];\n\n  function getOwnerDocument() {\n    var currentElement = openStack[openStack.length - 1];\n    return isHTMLTemplateElement(currentElement) ? currentElement._templateContents._ownerDocument : currentElement._ownerDocument;\n  }\n\n  function appendChild(child) {\n    var parentElement = openStack[openStack.length - 1];\n\n    if (isHTMLTemplateElement(parentElement)) {\n      parentElement._templateContents._insert(child, null);\n    } else {\n      parentElement._insert(child, null);\n    }\n  }\n\n  parser.on(\"text\", saxesOptions.fragment ? // In a fragment, all text events produced by saxes must result in a text\n  // node.\n  function (data) {\n    var ownerDocument = getOwnerDocument();\n    appendChild(Text.createImpl(globalObject, [], {\n      data: data,\n      ownerDocument: ownerDocument\n    }));\n  } : // When parsing a whole document, we must ignore those text nodes that are\n  // produced outside the root element. Saxes produces events for them,\n  // but DOM trees do not record text outside the root element.\n  function (data) {\n    if (openStack.length > 1) {\n      var ownerDocument = getOwnerDocument();\n      appendChild(Text.createImpl(globalObject, [], {\n        data: data,\n        ownerDocument: ownerDocument\n      }));\n    }\n  });\n  parser.on(\"cdata\", function (data) {\n    var ownerDocument = getOwnerDocument();\n    appendChild(CDATASection.createImpl(globalObject, [], {\n      data: data,\n      ownerDocument: ownerDocument\n    }));\n  });\n  parser.on(\"opentag\", function (tag) {\n    var tagLocal = tag.local,\n        tagAttributes = tag.attributes;\n    var ownerDocument = getOwnerDocument();\n    var tagNamespace = tag.uri === \"\" ? null : tag.uri;\n    var tagPrefix = tag.prefix === \"\" ? null : tag.prefix;\n    var isValue = tagAttributes.is === undefined ? null : tagAttributes.is.value;\n    var elem = createElement(ownerDocument, tagLocal, tagNamespace, tagPrefix, isValue, true); // We mark a script element as \"parser-inserted\", which prevents it from\n    // being immediately executed.\n\n    if (tagLocal === \"script\" && tagNamespace === HTML_NS) {\n      elem._parserInserted = true;\n    }\n\n    for (var _i = 0, _Object$keys = Object.keys(tagAttributes); _i < _Object$keys.length; _i++) {\n      var key = _Object$keys[_i];\n      var _tagAttributes$key = tagAttributes[key],\n          prefix = _tagAttributes$key.prefix,\n          local = _tagAttributes$key.local,\n          uri = _tagAttributes$key.uri,\n          value = _tagAttributes$key.value;\n      attributes.setAttributeValue(elem, local, value, prefix === \"\" ? null : prefix, uri === \"\" ? null : uri);\n    }\n\n    appendChild(elem);\n    openStack.push(elem);\n  });\n  parser.on(\"closetag\", function () {\n    var elem = openStack.pop(); // Once a script is populated, we can execute it.\n\n    if (elem.localName === \"script\" && elem.namespaceURI === HTML_NS) {\n      elem._eval();\n    }\n  });\n  parser.on(\"comment\", function (data) {\n    var ownerDocument = getOwnerDocument();\n    appendChild(Comment.createImpl(globalObject, [], {\n      data: data,\n      ownerDocument: ownerDocument\n    }));\n  });\n  parser.on(\"processinginstruction\", function (_ref) {\n    var target = _ref.target,\n        body = _ref.body;\n    var ownerDocument = getOwnerDocument();\n    appendChild(ProcessingInstruction.createImpl(globalObject, [], {\n      target: target,\n      data: body,\n      ownerDocument: ownerDocument\n    }));\n  });\n  parser.on(\"doctype\", function (dt) {\n    var ownerDocument = getOwnerDocument();\n    appendChild(parseDocType(globalObject, ownerDocument, \"<!doctype \".concat(dt, \">\")));\n    var entityMatcher = /<!ENTITY ([^ ]+) \"([^\"]+)\">/g;\n    var result;\n\n    while (result = entityMatcher.exec(dt)) {\n      var _result = result,\n          _result2 = _slicedToArray(_result, 3),\n          name = _result2[1],\n          value = _result2[2];\n\n      if (!(name in parser.ENTITIES)) {\n        parser.ENTITIES[name] = value;\n      }\n    }\n  });\n  parser.on(\"error\", function (err) {\n    throw DOMException.create(globalObject, [err.message, \"SyntaxError\"]);\n  });\n  return parser;\n}\n\nfunction parseFragment(markup, contextElement) {\n  var _globalObject = contextElement._globalObject,\n      _ownerDocument = contextElement._ownerDocument;\n  var fragment = DocumentFragment.createImpl(_globalObject, [], {\n    ownerDocument: _ownerDocument\n  }); // Only parseFragment needs resolvePrefix per the saxes documentation:\n  // https://github.com/lddubeau/saxes#parsing-xml-fragments\n\n  var parser = createParser(fragment, _globalObject, {\n    fragment: true,\n    resolvePrefix: function resolvePrefix(prefix) {\n      // saxes wants undefined as the return value if the prefix is not defined, not null.\n      return contextElement.lookupNamespaceURI(prefix) || undefined;\n    }\n  });\n  parser.write(markup).close();\n  return fragment;\n}\n\nfunction parseIntoDocument(markup, ownerDocument) {\n  var _globalObject = ownerDocument._globalObject;\n  var parser = createParser(ownerDocument, _globalObject, {\n    fileName: ownerDocument.location && ownerDocument.location.href\n  });\n  parser.write(markup).close();\n  return ownerDocument;\n}\n\nmodule.exports = {\n  parseFragment: parseFragment,\n  parseIntoDocument: parseIntoDocument\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/browser/parser/xml.js"],"names":["require","SaxesParser","DOMException","createElement","DocumentFragment","DocumentType","CDATASection","Comment","ProcessingInstruction","Text","attributes","HTML_NS","HTML5_DOCTYPE","PUBLIC_DOCTYPE","SYSTEM_DOCTYPE","CUSTOM_NAME_DOCTYPE","parseDocType","globalObject","ownerDocument","html","test","createDocumentType","publicPieces","exec","systemPieces","namePiece","name","publicId","systemId","createImpl","isHTMLTemplateElement","element","tagName","namespaceURI","createParser","rootNode","saxesOptions","parser","xmlns","defaultXMLVersion","forceXMLVersion","openStack","getOwnerDocument","currentElement","length","_templateContents","_ownerDocument","appendChild","child","parentElement","_insert","on","fragment","data","tag","tagLocal","local","tagAttributes","tagNamespace","uri","tagPrefix","prefix","isValue","is","undefined","value","elem","_parserInserted","Object","keys","key","setAttributeValue","push","pop","localName","_eval","target","body","dt","entityMatcher","result","ENTITIES","err","create","message","parseFragment","markup","contextElement","_globalObject","resolvePrefix","lookupNamespaceURI","write","close","parseIntoDocument","fileName","location","href","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { SaxesParser } = require(\"saxes\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst { createElement } = require(\"../../living/helpers/create-element\");\n\nconst DocumentFragment = require(\"../../living/generated/DocumentFragment\");\nconst DocumentType = require(\"../../living/generated/DocumentType\");\nconst CDATASection = require(\"../../living/generated/CDATASection\");\nconst Comment = require(\"../../living/generated/Comment\");\nconst ProcessingInstruction = require(\"../../living/generated/ProcessingInstruction\");\nconst Text = require(\"../../living/generated/Text\");\n\nconst attributes = require(\"../../living/attributes\");\nconst { HTML_NS } = require(\"../../living/helpers/namespaces\");\n\nconst HTML5_DOCTYPE = /<!doctype html>/i;\nconst PUBLIC_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+public\\s+\"([^\"]+)\"\\s+\"([^\"]+)\"/i;\nconst SYSTEM_DOCTYPE = /<!doctype\\s+([^\\s]+)\\s+system\\s+\"([^\"]+)\"/i;\nconst CUSTOM_NAME_DOCTYPE = /<!doctype\\s+([^\\s>]+)/i;\n\nfunction parseDocType(globalObject, ownerDocument, html) {\n  if (HTML5_DOCTYPE.test(html)) {\n    return createDocumentType(globalObject, ownerDocument, \"html\", \"\", \"\");\n  }\n\n  const publicPieces = PUBLIC_DOCTYPE.exec(html);\n  if (publicPieces) {\n    return createDocumentType(globalObject, ownerDocument, publicPieces[1], publicPieces[2], publicPieces[3]);\n  }\n\n  const systemPieces = SYSTEM_DOCTYPE.exec(html);\n  if (systemPieces) {\n    return createDocumentType(globalObject, ownerDocument, systemPieces[1], \"\", systemPieces[2]);\n  }\n\n  const namePiece = CUSTOM_NAME_DOCTYPE.exec(html)[1] || \"html\";\n  return createDocumentType(globalObject, ownerDocument, namePiece, \"\", \"\");\n}\n\nfunction createDocumentType(globalObject, ownerDocument, name, publicId, systemId) {\n  return DocumentType.createImpl(globalObject, [], { ownerDocument, name, publicId, systemId });\n}\n\nfunction isHTMLTemplateElement(element) {\n  return element.tagName === \"template\" && element.namespaceURI === HTML_NS;\n}\n\n\nfunction createParser(rootNode, globalObject, saxesOptions) {\n  const parser = new SaxesParser({\n    ...saxesOptions,\n    // Browsers always have namespace support.\n    xmlns: true,\n    // We force the parser to treat all documents (even documents declaring themselves to be XML 1.1 documents) as XML\n    // 1.0 documents. See https://github.com/jsdom/jsdom/issues/2677 for a discussion of the stakes.\n    defaultXMLVersion: \"1.0\",\n    forceXMLVersion: true\n  });\n  const openStack = [rootNode];\n\n  function getOwnerDocument() {\n    const currentElement = openStack[openStack.length - 1];\n\n    return isHTMLTemplateElement(currentElement) ?\n      currentElement._templateContents._ownerDocument :\n      currentElement._ownerDocument;\n  }\n\n  function appendChild(child) {\n    const parentElement = openStack[openStack.length - 1];\n\n    if (isHTMLTemplateElement(parentElement)) {\n      parentElement._templateContents._insert(child, null);\n    } else {\n      parentElement._insert(child, null);\n    }\n  }\n\n  parser.on(\"text\", saxesOptions.fragment ?\n    // In a fragment, all text events produced by saxes must result in a text\n    // node.\n    data => {\n      const ownerDocument = getOwnerDocument();\n      appendChild(Text.createImpl(globalObject, [], { data, ownerDocument }));\n    } :\n    // When parsing a whole document, we must ignore those text nodes that are\n    // produced outside the root element. Saxes produces events for them,\n    // but DOM trees do not record text outside the root element.\n    data => {\n      if (openStack.length > 1) {\n        const ownerDocument = getOwnerDocument();\n        appendChild(Text.createImpl(globalObject, [], { data, ownerDocument }));\n      }\n    });\n\n  parser.on(\"cdata\", data => {\n    const ownerDocument = getOwnerDocument();\n    appendChild(CDATASection.createImpl(globalObject, [], { data, ownerDocument }));\n  });\n\n  parser.on(\"opentag\", tag => {\n    const { local: tagLocal, attributes: tagAttributes } = tag;\n\n    const ownerDocument = getOwnerDocument();\n    const tagNamespace = tag.uri === \"\" ? null : tag.uri;\n    const tagPrefix = tag.prefix === \"\" ? null : tag.prefix;\n    const isValue = tagAttributes.is === undefined ? null : tagAttributes.is.value;\n\n    const elem = createElement(ownerDocument, tagLocal, tagNamespace, tagPrefix, isValue, true);\n\n    // We mark a script element as \"parser-inserted\", which prevents it from\n    // being immediately executed.\n    if (tagLocal === \"script\" && tagNamespace === HTML_NS) {\n      elem._parserInserted = true;\n    }\n\n    for (const key of Object.keys(tagAttributes)) {\n      const { prefix, local, uri, value } = tagAttributes[key];\n      attributes.setAttributeValue(\n        elem, local, value, prefix === \"\" ? null : prefix,\n        uri === \"\" ? null : uri\n      );\n    }\n\n    appendChild(elem);\n    openStack.push(elem);\n  });\n\n  parser.on(\"closetag\", () => {\n    const elem = openStack.pop();\n    // Once a script is populated, we can execute it.\n    if (elem.localName === \"script\" && elem.namespaceURI === HTML_NS) {\n      elem._eval();\n    }\n  });\n\n  parser.on(\"comment\", data => {\n    const ownerDocument = getOwnerDocument();\n    appendChild(Comment.createImpl(globalObject, [], { data, ownerDocument }));\n  });\n\n  parser.on(\"processinginstruction\", ({ target, body }) => {\n    const ownerDocument = getOwnerDocument();\n    appendChild(ProcessingInstruction.createImpl(globalObject, [], { target, data: body, ownerDocument }));\n  });\n\n  parser.on(\"doctype\", dt => {\n    const ownerDocument = getOwnerDocument();\n    appendChild(parseDocType(globalObject, ownerDocument, `<!doctype ${dt}>`));\n\n    const entityMatcher = /<!ENTITY ([^ ]+) \"([^\"]+)\">/g;\n    let result;\n    while ((result = entityMatcher.exec(dt))) {\n      const [, name, value] = result;\n      if (!(name in parser.ENTITIES)) {\n        parser.ENTITIES[name] = value;\n      }\n    }\n  });\n\n  parser.on(\"error\", err => {\n    throw DOMException.create(globalObject, [err.message, \"SyntaxError\"]);\n  });\n\n  return parser;\n}\n\nfunction parseFragment(markup, contextElement) {\n  const { _globalObject, _ownerDocument } = contextElement;\n\n  const fragment = DocumentFragment.createImpl(_globalObject, [], { ownerDocument: _ownerDocument });\n\n  // Only parseFragment needs resolvePrefix per the saxes documentation:\n  // https://github.com/lddubeau/saxes#parsing-xml-fragments\n  const parser = createParser(fragment, _globalObject, {\n    fragment: true,\n    resolvePrefix(prefix) {\n      // saxes wants undefined as the return value if the prefix is not defined, not null.\n      return contextElement.lookupNamespaceURI(prefix) || undefined;\n    }\n  });\n\n  parser.write(markup).close();\n\n  return fragment;\n}\n\nfunction parseIntoDocument(markup, ownerDocument) {\n  const { _globalObject } = ownerDocument;\n\n  const parser = createParser(ownerDocument, _globalObject, {\n    fileName: ownerDocument.location && ownerDocument.location.href\n  });\n\n  parser.write(markup).close();\n\n  return ownerDocument;\n}\n\nmodule.exports = {\n  parseFragment,\n  parseIntoDocument\n};\n"]},"metadata":{},"sourceType":"script"}
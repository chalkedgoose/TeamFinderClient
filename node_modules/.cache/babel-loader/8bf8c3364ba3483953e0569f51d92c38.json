{"ast":null,"code":"\"use strict\";\n/**\n * Manage all the request and it is able to abort\n * all pending request.\n */\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function RequestManager() {\n    _classCallCheck(this, RequestManager);\n\n    this.openedRequests = [];\n  }\n\n  _createClass(RequestManager, [{\n    key: \"add\",\n    value: function add(req) {\n      this.openedRequests.push(req);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(req) {\n      var idx = this.openedRequests.indexOf(req);\n\n      if (idx !== -1) {\n        this.openedRequests.splice(idx, 1);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _iterator = _createForOfIteratorHelper(this.openedRequests),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var openedRequest = _step.value;\n          openedRequest.abort();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.openedRequests = [];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.openedRequests.length;\n    }\n  }]);\n\n  return RequestManager;\n}();","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/browser/resources/request-manager.js"],"names":["module","exports","openedRequests","req","push","idx","indexOf","splice","openedRequest","abort","length"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;;;;;;;AACAA,MAAM,CAACC,OAAP;AACE,4BAAc;AAAA;;AACZ,SAAKC,cAAL,GAAsB,EAAtB;AACD;;AAHH;AAAA;AAAA,wBAKMC,GALN,EAKW;AACP,WAAKD,cAAL,CAAoBE,IAApB,CAAyBD,GAAzB;AACD;AAPH;AAAA;AAAA,2BASSA,GATT,EASc;AACV,UAAME,GAAG,GAAG,KAAKH,cAAL,CAAoBI,OAApB,CAA4BH,GAA5B,CAAZ;;AACA,UAAIE,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,aAAKH,cAAL,CAAoBK,MAApB,CAA2BF,GAA3B,EAAgC,CAAhC;AACD;AACF;AAdH;AAAA;AAAA,4BAgBU;AAAA,iDACsB,KAAKH,cAD3B;AAAA;;AAAA;AACN,4DAAiD;AAAA,cAAtCM,aAAsC;AAC/CA,UAAAA,aAAa,CAACC,KAAd;AACD;AAHK;AAAA;AAAA;AAAA;AAAA;;AAIN,WAAKP,cAAL,GAAsB,EAAtB;AACD;AArBH;AAAA;AAAA,2BAuBS;AACL,aAAO,KAAKA,cAAL,CAAoBQ,MAA3B;AACD;AAzBH;;AAAA;AAAA","sourcesContent":["\"use strict\";\n\n/**\n * Manage all the request and it is able to abort\n * all pending request.\n */\nmodule.exports = class RequestManager {\n  constructor() {\n    this.openedRequests = [];\n  }\n\n  add(req) {\n    this.openedRequests.push(req);\n  }\n\n  remove(req) {\n    const idx = this.openedRequests.indexOf(req);\n    if (idx !== -1) {\n      this.openedRequests.splice(idx, 1);\n    }\n  }\n\n  close() {\n    for (const openedRequest of this.openedRequests) {\n      openedRequest.abort();\n    }\n    this.openedRequests = [];\n  }\n\n  size() {\n    return this.openedRequests.length;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"./header-types\"),\n    isForbidden = _require.isForbidden,\n    isForbiddenResponse = _require.isForbiddenResponse,\n    isPrivilegedNoCORSRequest = _require.isPrivilegedNoCORSRequest,\n    isNoCORSSafelistedRequest = _require.isNoCORSSafelistedRequest,\n    isCORSWhitelisted = _require.isCORSWhitelisted;\n\nvar HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nvar HeadersImpl = /*#__PURE__*/function () {\n  function HeadersImpl(globalObject, args) {\n    _classCallCheck(this, HeadersImpl);\n\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _createClass(HeadersImpl, [{\n    key: \"_fill\",\n    value: function _fill(init) {\n      if (Array.isArray(init)) {\n        var _iterator = _createForOfIteratorHelper(init),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var header = _step.value;\n\n            if (header.length !== 2) {\n              throw new TypeError(\"init is invalid\");\n            }\n\n            this.append(header[0], header[1]);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        for (var _i = 0, _Object$keys = Object.keys(init); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          this.append(key, init[key]);\n        }\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      assertName(name);\n      return this.headersList.contains(name);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      assertName(name);\n      return this.headersList.get(name);\n    }\n  }, {\n    key: \"_removePrivilegedNoCORSHeaders\",\n    value: function _removePrivilegedNoCORSHeaders() {\n      this.headersList.delete(\"range\");\n    }\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      value = value.trim();\n      assertName(name);\n      assertValue(value);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            var temporaryValue = this.get(name);\n\n            if (temporaryValue === null) {\n              temporaryValue = value;\n            } else {\n              temporaryValue += \", \".concat(value);\n            }\n\n            if (!isCORSWhitelisted(name, value)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.append(name, value);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      value = value.trim();\n      assertName(name);\n      assertValue(value);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            if (!isCORSWhitelisted(name, value)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.set(name, value);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      assertName(name);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            if (!isNoCORSSafelistedRequest(name) && !isPrivilegedNoCORSRequest(name)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.delete(name);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator2, _step2, header;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this.headersList.sortAndCombine());\n              _context.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              header = _step2.value;\n              _context.next = 7;\n              return header;\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator2.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator2.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }]);\n\n  return HeadersImpl;\n}();\n\nexports.implementation = HeadersImpl;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/fetch/Headers-impl.js"],"names":["require","isForbidden","isForbiddenResponse","isPrivilegedNoCORSRequest","isNoCORSSafelistedRequest","isCORSWhitelisted","HeaderList","assertName","name","match","TypeError","assertValue","value","HeadersImpl","globalObject","args","guard","headersList","_fill","init","Array","isArray","header","length","append","Object","keys","key","contains","get","delete","trim","temporaryValue","_removePrivilegedNoCORSHeaders","set","Symbol","iterator","sortAndCombine","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  isForbidden,\n  isForbiddenResponse,\n  isPrivilegedNoCORSRequest,\n  isNoCORSSafelistedRequest,\n  isCORSWhitelisted\n} = require(\"./header-types\");\nconst HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nclass HeadersImpl {\n  constructor(globalObject, args) {\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _fill(init) {\n    if (Array.isArray(init)) {\n      for (const header of init) {\n        if (header.length !== 2) {\n          throw new TypeError(\"init is invalid\");\n        }\n        this.append(header[0], header[1]);\n      }\n    } else {\n      for (const key of Object.keys(init)) {\n        this.append(key, init[key]);\n      }\n    }\n  }\n\n  has(name) {\n    assertName(name);\n    return this.headersList.contains(name);\n  }\n\n  get(name) {\n    assertName(name);\n    return this.headersList.get(name);\n  }\n\n  _removePrivilegedNoCORSHeaders() {\n    this.headersList.delete(\"range\");\n  }\n\n  append(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        let temporaryValue = this.get(name);\n        if (temporaryValue === null) {\n          temporaryValue = value;\n        } else {\n          temporaryValue += `, ${value}`;\n        }\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n\n    this.headersList.append(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  set(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.set(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  delete(name) {\n    assertName(name);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (\n          !isNoCORSSafelistedRequest(name) &&\n          !isPrivilegedNoCORSRequest(name)\n        ) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.delete(name);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  * [Symbol.iterator]() {\n    for (const header of this.headersList.sortAndCombine()) {\n      yield header;\n    }\n  }\n}\n\nexports.implementation = HeadersImpl;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"../helpers/namespaces\"),\n    SVG_NS = _require2.SVG_NS;\n\nvar _require3 = require(\"../../utils\"),\n    mixin = _require3.mixin;\n\nvar SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\n\nvar ElementImpl = require(\"./Element-impl\").implementation;\n\nvar ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar HTMLOrSVGElementImpl = require(\"./HTMLOrSVGElement-impl\").implementation;\n\nvar SVGElementImpl = /*#__PURE__*/function (_ElementImpl) {\n  _inherits(SVGElementImpl, _ElementImpl);\n\n  var _super = _createSuper(SVGElementImpl);\n\n  function SVGElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, SVGElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n\n    _this._initHTMLOrSVGElement();\n\n    _this._initElementCSSInlineStyle();\n\n    _this._initGlobalEvents();\n\n    return _this;\n  } // Keep in sync with HTMLElement. https://github.com/jsdom/jsdom/issues/2599\n\n\n  _createClass(SVGElementImpl, [{\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n        this._settingCssText = true;\n        this._style.cssText = value;\n        this._settingCssText = false;\n      } else if (name.startsWith(\"on\")) {\n        this._globalEventChanged(name.substring(2));\n      }\n\n      _get(_getPrototypeOf(SVGElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"className\",\n    get: function get() {\n      return SVGAnimatedString.createImpl(this._globalObject, [], {\n        element: this,\n        attribute: \"class\"\n      });\n    }\n  }, {\n    key: \"ownerSVGElement\",\n    get: function get() {\n      var e = domSymbolTree.parent(this);\n\n      while (e && e.namespaceURI === SVG_NS) {\n        if (e.localName === \"svg\") {\n          return e;\n        }\n\n        e = domSymbolTree.parent(e);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"viewportElement\",\n    get: function get() {\n      // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n      return this.ownerSVGElement;\n    }\n  }]);\n\n  return SVGElementImpl;\n}(ElementImpl);\n\nSVGElementImpl.attributeRegistry = new Map();\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLOrSVGElementImpl.prototype);\nexports.implementation = SVGElementImpl;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/SVGElement-impl.js"],"names":["require","domSymbolTree","SVG_NS","mixin","SVGAnimatedString","ElementImpl","implementation","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLOrSVGElementImpl","SVGElementImpl","globalObject","args","privateData","_initHTMLOrSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","name","value","oldValue","_settingCssText","_style","cssText","startsWith","_globalEventChanged","substring","apply","arguments","createImpl","_globalObject","element","attribute","e","parent","namespaceURI","localName","ownerSVGElement","attributeRegistry","Map","prototype","exports"],"mappings":"AAAA;;;;;;;;;;;;;;eAE0BA,OAAO,CAAC,+BAAD,C;IAAzBC,a,YAAAA,a;;gBACWD,OAAO,CAAC,uBAAD,C;IAAlBE,M,aAAAA,M;;gBACUF,OAAO,CAAC,aAAD,C;IAAjBG,K,aAAAA,K;;AACR,IAAMC,iBAAiB,GAAGJ,OAAO,CAAC,gCAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,gBAAD,CAAP,CAA0BM,cAA9C;;AACA,IAAMC,yBAAyB,GAAGP,OAAO,CAAC,8BAAD,CAAP,CAAwCM,cAA1E;;AACA,IAAME,uBAAuB,GAAGR,OAAO,CAAC,4BAAD,CAAP,CAAsCM,cAAtE;;AACA,IAAMG,oBAAoB,GAAGT,OAAO,CAAC,yBAAD,CAAP,CAAmCM,cAAhE;;IAEMI,c;;;;;AACJ,0BAAYC,YAAZ,EAA0BC,IAA1B,EAAgCC,WAAhC,EAA6C;AAAA;;AAAA;;AAC3C,8BAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;;AACA,UAAKC,qBAAL;;AACA,UAAKC,0BAAL;;AACA,UAAKC,iBAAL;;AAJ2C;AAK5C,G,CAED;;;;;kCACcC,I,EAAMC,K,EAAOC,Q,EAAU;AACnC,UAAIF,IAAI,KAAK,OAAT,IAAoBC,KAAK,KAAKC,QAA9B,IAA0C,CAAC,KAAKC,eAApD,EAAqE;AACnE,aAAKA,eAAL,GAAuB,IAAvB;AACA,aAAKC,MAAL,CAAYC,OAAZ,GAAsBJ,KAAtB;AACA,aAAKE,eAAL,GAAuB,KAAvB;AACD,OAJD,MAIO,IAAIH,IAAI,CAACM,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AAChC,aAAKC,mBAAL,CAAyBP,IAAI,CAACQ,SAAL,CAAe,CAAf,CAAzB;AACD;;AAED,6EAAoBC,KAApB,CAA0B,IAA1B,EAAgCC,SAAhC;AACD;;;wBAEe;AACd,aAAOvB,iBAAiB,CAACwB,UAAlB,CAA6B,KAAKC,aAAlC,EAAiD,EAAjD,EAAqD;AAC1DC,QAAAA,OAAO,EAAE,IADiD;AAE1DC,QAAAA,SAAS,EAAE;AAF+C,OAArD,CAAP;AAID;;;wBAEqB;AACpB,UAAIC,CAAC,GAAG/B,aAAa,CAACgC,MAAd,CAAqB,IAArB,CAAR;;AACA,aAAOD,CAAC,IAAIA,CAAC,CAACE,YAAF,KAAmBhC,MAA/B,EAAuC;AACrC,YAAI8B,CAAC,CAACG,SAAF,KAAgB,KAApB,EAA2B;AACzB,iBAAOH,CAAP;AACD;;AACDA,QAAAA,CAAC,GAAG/B,aAAa,CAACgC,MAAd,CAAqBD,CAArB,CAAJ;AACD;;AAED,aAAO,IAAP;AACD;;;wBAEqB;AACpB;AACA,aAAO,KAAKI,eAAZ;AACD;;;;EA3C0B/B,W;;AA8C7BK,cAAc,CAAC2B,iBAAf,GAAmC,IAAIC,GAAJ,EAAnC;AAEAnC,KAAK,CAACO,cAAc,CAAC6B,SAAhB,EAA2BhC,yBAAyB,CAACgC,SAArD,CAAL;AACApC,KAAK,CAACO,cAAc,CAAC6B,SAAhB,EAA2B/B,uBAAuB,CAAC+B,SAAnD,CAAL;AACApC,KAAK,CAACO,cAAc,CAAC6B,SAAhB,EAA2B9B,oBAAoB,CAAC8B,SAAhD,CAAL;AAEAC,OAAO,CAAClC,cAAR,GAAyBI,cAAzB","sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { SVG_NS } = require(\"../helpers/namespaces\");\nconst { mixin } = require(\"../../utils\");\nconst SVGAnimatedString = require(\"../generated/SVGAnimatedString\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLOrSVGElementImpl = require(\"./HTMLOrSVGElement-impl\").implementation;\n\nclass SVGElementImpl extends ElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._initHTMLOrSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n  }\n\n  // Keep in sync with HTMLElement. https://github.com/jsdom/jsdom/issues/2599\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get className() {\n    return SVGAnimatedString.createImpl(this._globalObject, [], {\n      element: this,\n      attribute: \"class\"\n    });\n  }\n\n  get ownerSVGElement() {\n    let e = domSymbolTree.parent(this);\n    while (e && e.namespaceURI === SVG_NS) {\n      if (e.localName === \"svg\") {\n        return e;\n      }\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  get viewportElement() {\n    // TODO: <symbol>/<use> may make this different from ownerSVGElement.\n    return this.ownerSVGElement;\n  }\n}\n\nSVGElementImpl.attributeRegistry = new Map();\n\nmixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(SVGElementImpl.prototype, HTMLOrSVGElementImpl.prototype);\n\nexports.implementation = SVGElementImpl;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../attributes\"),\n    setAttributeValue = _require.setAttributeValue,\n    removeAttributeByName = _require.removeAttributeByName;\n\nvar validateName = require(\"../helpers/validate-names\").name;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, function (match, alpha) {\n    return alpha.toUpperCase();\n  });\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, function (match) {\n    return \"-\".concat(match.toLowerCase());\n  });\n}\n\nexports.implementation = /*#__PURE__*/function () {\n  function DOMStringMapImpl(globalObject, args, privateData) {\n    _classCallCheck(this, DOMStringMapImpl);\n\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n\n  _createClass(DOMStringMapImpl, [{\n    key: idlUtils.namedGet,\n    value: function value(name) {\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches && attrCamelCase(matches[1]) === name) {\n          return attr.value;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: idlUtils.namedSetNew,\n    value: function value(name, _value) {\n      if (/-[a-z]/.test(name)) {\n        throw DOMException.create(this._globalObject, [\"'\".concat(name, \"' is not a valid property name\"), \"SyntaxError\"]);\n      }\n\n      name = \"data-\".concat(attrSnakeCase(name));\n      validateName(this._globalObject, name);\n      setAttributeValue(this._element, name, _value);\n    }\n  }, {\n    key: idlUtils.namedSetExisting,\n    value: function value(name, _value2) {\n      this[idlUtils.namedSetNew](name, _value2);\n    }\n  }, {\n    key: idlUtils.namedDelete,\n    value: function value(name) {\n      name = \"data-\".concat(attrSnakeCase(name));\n      removeAttributeByName(this._element, name);\n    }\n  }, {\n    key: idlUtils.supportedPropertyNames,\n    get: function get() {\n      var result = new Set();\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches) {\n          result.add(attrCamelCase(matches[1]));\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return DOMStringMapImpl;\n}();","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"names":["idlUtils","require","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","globalObject","args","privateData","_globalObject","_element","element","namedGet","attributes","i","length","attr","item","matches","exec","localName","value","undefined","namedSetNew","test","create","namedSetExisting","namedDelete","supportedPropertyNames","result","Set","add"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [\n        `'${name}' is not a valid property name`,\n        \"SyntaxError\"\n      ]);\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar nodeTypes = require(\"../node-type\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree; // Serialization only requires a subset of the tree adapter interface.\n// Tree traversing\n\n\nexports.getFirstChild = function (node) {\n  return node.firstChild;\n};\n\nexports.getChildNodes = function (node) {\n  return node.childNodesForSerializing || domSymbolTree.childrenToArray(node);\n};\n\nexports.getParentNode = function (node) {\n  return node.parentNode;\n};\n\nexports.getAttrList = function (element) {\n  var attributeList = _toConsumableArray(element._attributeList);\n\n  if (element._isValue && attributeList.every(function (attr) {\n    return attr.name !== \"is\";\n  })) {\n    attributeList.unshift({\n      name: \"is\",\n      namespace: null,\n      prefix: null,\n      value: element._isValue\n    });\n  }\n\n  return attributeList;\n}; // Node data\n\n\nexports.getTagName = function (element) {\n  return element._qualifiedName;\n}; // https://github.com/inikulin/parse5/issues/231\n\n\nexports.getNamespaceURI = function (element) {\n  return element.namespaceURI;\n};\n\nexports.getTextNodeContent = exports.getCommentNodeContent = function (node) {\n  return node.data;\n};\n\nexports.getDocumentTypeNodeName = function (node) {\n  return node.name;\n};\n\nexports.getDocumentTypeNodePublicId = function (node) {\n  return node.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function (node) {\n  return node.systemId;\n};\n\nexports.getTemplateContent = function (templateElement) {\n  return templateElement._templateContents;\n};\n\nexports.getDocumentMode = function (document) {\n  return document._mode;\n}; // Node types\n\n\nexports.isTextNode = function (node) {\n  return node.nodeType === nodeTypes.TEXT_NODE;\n};\n\nexports.isCommentNode = function (node) {\n  return node.nodeType === nodeTypes.COMMENT_NODE;\n};\n\nexports.isDocumentTypeNode = function (node) {\n  return node.nodeType === nodeTypes.DOCUMENT_TYPE_NODE;\n};\n\nexports.isElementNode = function (node) {\n  return node.nodeType === nodeTypes.ELEMENT_NODE;\n}; // Source code location\n\n\nexports.setNodeSourceCodeLocation = function (node, location) {\n  node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function (node) {\n  return node.sourceCodeLocation;\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/domparsing/parse5-adapter-serialization.js"],"names":["nodeTypes","require","domSymbolTree","exports","getFirstChild","node","firstChild","getChildNodes","childNodesForSerializing","childrenToArray","getParentNode","parentNode","getAttrList","element","attributeList","_attributeList","_isValue","every","attr","name","unshift","namespace","prefix","value","getTagName","_qualifiedName","getNamespaceURI","namespaceURI","getTextNodeContent","getCommentNodeContent","data","getDocumentTypeNodeName","getDocumentTypeNodePublicId","publicId","getDocumentTypeNodeSystemId","systemId","getTemplateContent","templateElement","_templateContents","getDocumentMode","document","_mode","isTextNode","nodeType","TEXT_NODE","isCommentNode","COMMENT_NODE","isDocumentTypeNode","DOCUMENT_TYPE_NODE","isElementNode","ELEMENT_NODE","setNodeSourceCodeLocation","location","sourceCodeLocation","getNodeSourceCodeLocation"],"mappings":"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","sourcesContent":["\"use strict\";\nconst nodeTypes = require(\"../node-type\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\n// Serialization only requires a subset of the tree adapter interface.\n\n// Tree traversing\nexports.getFirstChild = node => node.firstChild;\n\nexports.getChildNodes = node => node.childNodesForSerializing || domSymbolTree.childrenToArray(node);\n\nexports.getParentNode = node => node.parentNode;\n\nexports.getAttrList = element => {\n  const attributeList = [...element._attributeList];\n\n  if (element._isValue && attributeList.every(attr => attr.name !== \"is\")) {\n    attributeList.unshift({\n      name: \"is\",\n      namespace: null,\n      prefix: null,\n      value: element._isValue\n    });\n  }\n\n  return attributeList;\n};\n\n// Node data\nexports.getTagName = element => element._qualifiedName; // https://github.com/inikulin/parse5/issues/231\n\nexports.getNamespaceURI = element => element.namespaceURI;\n\nexports.getTextNodeContent = exports.getCommentNodeContent = node => node.data;\n\nexports.getDocumentTypeNodeName = node => node.name;\n\nexports.getDocumentTypeNodePublicId = node => node.publicId;\n\nexports.getDocumentTypeNodeSystemId = node => node.systemId;\n\nexports.getTemplateContent = templateElement => templateElement._templateContents;\n\nexports.getDocumentMode = document => document._mode;\n\n// Node types\nexports.isTextNode = node => node.nodeType === nodeTypes.TEXT_NODE;\n\nexports.isCommentNode = node => node.nodeType === nodeTypes.COMMENT_NODE;\n\nexports.isDocumentTypeNode = node => node.nodeType === nodeTypes.DOCUMENT_TYPE_NODE;\n\nexports.isElementNode = node => node.nodeType === nodeTypes.ELEMENT_NODE;\n\n// Source code location\nexports.setNodeSourceCodeLocation = (node, location) => {\n  node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = node => node.sourceCodeLocation;\n"]},"metadata":{},"sourceType":"script"}
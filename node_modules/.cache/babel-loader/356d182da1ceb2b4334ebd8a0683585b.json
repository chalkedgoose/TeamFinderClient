{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nvar ProgressEvent = require(\"../generated/ProgressEvent\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nvar _require2 = require(\"../helpers/events\"),\n    fireAnEvent = _require2.fireAnEvent;\n\nvar _require3 = require(\"../helpers/binary-data\"),\n    copyToArrayBufferInNewRealm = _require3.copyToArrayBufferInNewRealm;\n\nvar READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nvar events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nvar FileReaderImpl = /*#__PURE__*/function (_EventTargetImpl) {\n  _inherits(FileReaderImpl, _EventTargetImpl);\n\n  var _super = _createSuper(FileReaderImpl);\n\n  function FileReaderImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, FileReaderImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this.error = null;\n    _this.readyState = READY_STATES.EMPTY;\n    _this.result = null;\n    _this._globalObject = globalObject;\n    _this._ownerDocument = globalObject.document;\n    _this._terminated = false;\n    return _this;\n  }\n\n  _createClass(FileReaderImpl, [{\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(file) {\n      this._readFile(file, \"buffer\");\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(file) {\n      this._readFile(file, \"binaryString\");\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(file) {\n      this._readFile(file, \"dataURL\");\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(file, encoding) {\n      this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n        this.result = null;\n        return;\n      }\n\n      if (this.readyState === READY_STATES.LOADING) {\n        this.readyState = READY_STATES.DONE;\n        this.result = null;\n      }\n\n      this._terminated = true;\n\n      this._fireProgressEvent(\"abort\");\n\n      this._fireProgressEvent(\"loadend\");\n    }\n  }, {\n    key: \"_fireProgressEvent\",\n    value: function _fireProgressEvent(name, props) {\n      fireAnEvent(name, this, ProgressEvent, props);\n    }\n  }, {\n    key: \"_readFile\",\n    value: function _readFile(file, format, encoding) {\n      var _this2 = this;\n\n      if (this.readyState === READY_STATES.LOADING) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this.readyState = READY_STATES.LOADING;\n      setImmediate(function () {\n        if (_this2._terminated) {\n          _this2._terminated = false;\n          return;\n        }\n\n        _this2._fireProgressEvent(\"loadstart\");\n\n        var data = file._buffer;\n\n        if (!data) {\n          data = Buffer.alloc(0);\n        }\n\n        _this2._fireProgressEvent(\"progress\", {\n          lengthComputable: !isNaN(file.size),\n          total: file.size,\n          loaded: data.length\n        });\n\n        setImmediate(function () {\n          if (_this2._terminated) {\n            _this2._terminated = false;\n            return;\n          }\n\n          switch (format) {\n            default:\n            case \"buffer\":\n              {\n                _this2.result = copyToArrayBufferInNewRealm(data, _this2._globalObject);\n                break;\n              }\n\n            case \"binaryString\":\n              {\n                _this2.result = data.toString(\"binary\");\n                break;\n              }\n\n            case \"dataURL\":\n              {\n                // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n                var contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n                _this2.result = \"data:\".concat(contentType, \";base64,\").concat(data.toString(\"base64\"));\n                break;\n              }\n\n            case \"text\":\n              {\n                _this2.result = whatwgEncoding.decode(data, encoding);\n                break;\n              }\n          }\n\n          _this2.readyState = READY_STATES.DONE;\n\n          _this2._fireProgressEvent(\"load\");\n\n          _this2._fireProgressEvent(\"loadend\");\n        });\n      });\n    }\n  }]);\n\n  return FileReaderImpl;\n}(EventTargetImpl);\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"names":["whatwgEncoding","require","MIMEType","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","fireAnEvent","copyToArrayBufferInNewRealm","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","globalObject","args","privateData","error","readyState","result","_globalObject","_ownerDocument","document","_terminated","file","_readFile","encoding","labelToName","_fireProgressEvent","name","props","format","create","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","toString","contentType","parse","type","decode","prototype","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { copyToArrayBufferInNewRealm } = require(\"../helpers/binary-data\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\n\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw DOMException.create(this._globalObject, [\n        \"The object is in an invalid state.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    this.readyState = READY_STATES.LOADING;\n\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\": {\n            this.result = copyToArrayBufferInNewRealm(data, this._globalObject);\n            break;\n          }\n          case \"binaryString\": {\n            this.result = data.toString(\"binary\");\n            break;\n          }\n          case \"dataURL\": {\n            // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n            const contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n            this.result = `data:${contentType};base64,${data.toString(\"base64\")}`;\n            break;\n          }\n          case \"text\": {\n            this.result = whatwgEncoding.decode(data, encoding);\n            break;\n          }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\n\nexports.implementation = FileReaderImpl;\n"]},"metadata":{},"sourceType":"script"}
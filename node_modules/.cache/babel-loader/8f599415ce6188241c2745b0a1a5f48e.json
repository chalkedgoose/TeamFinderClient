{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nvar CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require2 = require(\"../../utils\"),\n    mixin = _require2.mixin; // https://dom.spec.whatwg.org/#text\n\n\nvar TextImpl = /*#__PURE__*/function (_CharacterDataImpl) {\n  _inherits(TextImpl, _CharacterDataImpl);\n\n  var _super = _createSuper(TextImpl);\n\n  function TextImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, TextImpl);\n\n    _this = _super.call(this, globalObject, args, _objectSpread({\n      data: args[0]\n    }, privateData));\n\n    _this._initSlotableMixin();\n\n    _this.nodeType = NODE_TYPE.TEXT_NODE;\n    return _this;\n  } // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n\n\n  _createClass(TextImpl, [{\n    key: \"splitText\",\n    value: function splitText(offset) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = domSymbolTree.parent(this);\n\n      if (parent !== null) {\n        parent._insert(newNode, this.nextSibling);\n\n        var _iterator = _createForOfIteratorHelper(this._referencedRanges),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var range = _step.value;\n            var _start = range._start,\n                _end = range._end;\n\n            if (_start.node === this && _start.offset > offset) {\n              range._setLiveRangeStart(newNode, _start.offset - offset);\n            }\n\n            if (_end.node === this && _end.offset > offset) {\n              range._setLiveRangeEnd(newNode, _end.offset - offset);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var nodeIndex = domSymbolTree.index(this);\n\n        var _iterator2 = _createForOfIteratorHelper(parent._referencedRanges),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _range = _step2.value;\n            var _start2 = _range._start,\n                _end2 = _range._end;\n\n            if (_start2.node === parent && _start2.offset === nodeIndex + 1) {\n              _range._setLiveRangeStart(parent, _start2.offset + 1);\n            }\n\n            if (_end2.node === parent && _end2.offset === nodeIndex + 1) {\n              _range._setLiveRangeEnd(parent, _end2.offset + 1);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      this.replaceData(offset, count, \"\");\n      return newNode;\n    } // https://dom.spec.whatwg.org/#dom-text-wholetext\n\n  }, {\n    key: \"wholeText\",\n    get: function get() {\n      var wholeText = this.textContent;\n      var next;\n      var current = this;\n\n      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText = next.textContent + wholeText;\n        current = next;\n      }\n\n      current = this;\n\n      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText += next.textContent;\n        current = next;\n      }\n\n      return wholeText;\n    }\n  }]);\n\n  return TextImpl;\n}(CharacterDataImpl);\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"names":["SlotableMixinImpl","require","implementation","CharacterDataImpl","domSymbolTree","DOMException","NODE_TYPE","mixin","TextImpl","globalObject","args","privateData","data","_initSlotableMixin","nodeType","TEXT_NODE","offset","length","create","_globalObject","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","_insert","nextSibling","_referencedRanges","range","_start","_end","node","_setLiveRangeStart","_setLiveRangeEnd","nodeIndex","index","replaceData","wholeText","textContent","next","current","previousSibling","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { mixin } = require(\"../../utils\");\n\n// https://dom.spec.whatwg.org/#text\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ...privateData\n    });\n\n    this._initSlotableMixin();\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n  splitText(offset) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n\n      for (const range of this._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n\n      const nodeIndex = domSymbolTree.index(this);\n      for (const range of parent._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-wholetext\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"]},"metadata":{},"sourceType":"script"}
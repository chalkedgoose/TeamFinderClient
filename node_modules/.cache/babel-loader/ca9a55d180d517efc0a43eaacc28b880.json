{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/traversal\"),\n    closest = _require3.closest;\n\nvar _require4 = require(\"../helpers/form-controls\"),\n    formOwner = _require4.formOwner;\n\nvar HTMLOptionElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLOptionElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLOptionElementImpl);\n\n  function HTMLOptionElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLOptionElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    _this._selectedness = false;\n    _this._dirtyness = false;\n    return _this;\n  }\n\n  _createClass(HTMLOptionElementImpl, [{\n    key: \"_removeOtherSelectedness\",\n    value: function _removeOtherSelectedness() {\n      // Remove the selectedness flag from all other options in this select\n      var select = this._selectNode;\n\n      if (select && !select.hasAttributeNS(null, \"multiple\")) {\n        var _iterator = _createForOfIteratorHelper(select.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n\n            if (option !== this) {\n              option._selectedness = false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"_askForAReset\",\n    value: function _askForAReset() {\n      var select = this._selectNode;\n\n      if (select) {\n        select._askedForAReset();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name) {\n      if (!this._dirtyness && name === \"selected\") {\n        this._selectedness = this.hasAttributeNS(null, \"selected\");\n\n        if (this._selectedness) {\n          this._removeOtherSelectedness();\n        }\n\n        this._askForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLOptionElementImpl.prototype), \"_attrModified\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"_getValue\",\n    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n    value: function _getValue() {\n      if (this.hasAttributeNS(null, \"value\")) {\n        return this.getAttributeNS(null, \"value\");\n      }\n\n      return this.text;\n    }\n  }, {\n    key: \"_selectNode\",\n    get: function get() {\n      var select = domSymbolTree.parent(this);\n\n      if (!select) {\n        return null;\n      }\n\n      if (select.nodeName.toUpperCase() !== \"SELECT\") {\n        select = domSymbolTree.parent(select);\n\n        if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n          return null;\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      // TODO is not correctly excluding script and SVG script descendants\n      return stripAndCollapseASCIIWhitespace(this.textContent);\n    },\n    set: function set(value) {\n      this.textContent = value;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._getValue();\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"value\", value);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      var select = closest(this, \"select\");\n\n      if (select === null) {\n        return 0;\n      }\n\n      return select.options.indexOf(this);\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedness;\n    },\n    set: function set(s) {\n      this._dirtyness = true;\n      this._selectedness = Boolean(s);\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n\n      this._modified();\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      if (this.hasAttributeNS(null, \"label\")) {\n        return this.getAttributeNS(null, \"label\");\n      }\n\n      return this.text;\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"label\", value);\n    }\n  }]);\n\n  return HTMLOptionElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"names":["HTMLElementImpl","require","implementation","stripAndCollapseASCIIWhitespace","domSymbolTree","closest","formOwner","HTMLOptionElementImpl","globalObject","args","privateData","_selectedness","_dirtyness","select","_selectNode","hasAttributeNS","options","option","_askedForAReset","name","_removeOtherSelectedness","_askForAReset","apply","arguments","getAttributeNS","text","parent","nodeName","toUpperCase","textContent","value","_getValue","setAttributeNS","indexOf","s","Boolean","_modified","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar xnv = require(\"xml-name-validator\");\n\nvar _require = require(\"./constants\"),\n    NAMESPACES = _require.NAMESPACES;\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  var generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  var candidateList = map[ns];\n\n  if (!candidateList) {\n    return null;\n  }\n\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value\n/* , requireWellFormed*/\n) {\n  if (value === null) {\n    return \"\";\n  } // TODO: Check well-formedness\n\n\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n  var result = \"\";\n  var namespaceLocalnames = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(element.attributes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attr = _step.value;\n\n      if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n        throw new Error(\"Found duplicated attribute\");\n      }\n\n      if (!namespaceLocalnames[attr.namespaceURI]) {\n        namespaceLocalnames[attr.namespaceURI] = new Set();\n      }\n\n      namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n      var attributeNamespace = attr.namespaceURI;\n      var candidatePrefix = null;\n\n      if (attributeNamespace !== null) {\n        candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n\n        if (attributeNamespace === NAMESPACES.XMLNS) {\n          if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n            continue;\n          }\n\n          if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n            throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n          }\n\n          if (requireWellFormed && attr.value === \"\") {\n            throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n          }\n\n          if (attr.prefix === \"xmlns\") {\n            candidatePrefix = \"xmlns\";\n          }\n        } else if (candidatePrefix === null) {\n          candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n          result += \" xmlns:\".concat(candidatePrefix, \"=\\\"\").concat(serializeAttributeValue(attributeNamespace, requireWellFormed), \"\\\"\");\n        }\n      }\n\n      result += \" \";\n\n      if (candidatePrefix !== null) {\n        result += candidatePrefix + \":\";\n      }\n\n      if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n        throw new Error(\"Invalid attribute localName value\");\n      }\n\n      result += \"\".concat(attr.localName, \"=\\\"\").concat(serializeAttributeValue(attr.value, requireWellFormed), \"\\\"\");\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/w3c-xmlserializer/lib/attributes.js"],"names":["xnv","require","NAMESPACES","generatePrefix","map","newNamespace","prefixIndex","generatedPrefix","preferredPrefixString","ns","preferredPrefix","candidateList","includes","length","serializeAttributeValue","value","replace","serializeAttributes","element","localPrefixes","ignoreNamespaceDefAttr","requireWellFormed","refs","result","namespaceLocalnames","Object","create","attributes","attr","namespaceURI","has","localName","Error","Set","add","attributeNamespace","candidatePrefix","prefix","XMLNS","XML","name","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst xnv = require(\"xml-name-validator\");\n\nconst { NAMESPACES } = require(\"./constants\");\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n  if (!candidateList) {\n    return null;\n  }\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value/* , requireWellFormed*/) {\n  if (value === null) {\n    return \"\";\n  }\n  // TODO: Check well-formedness\n  return value\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\\t/g, \"&#x9;\")\n    .replace(/\\n/g, \"&#xA;\")\n    .replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(\n  element,\n  map,\n  localPrefixes,\n  ignoreNamespaceDefAttr,\n  requireWellFormed,\n  refs\n) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n  for (const attr of element.attributes) {\n    if (\n      requireWellFormed &&\n      namespaceLocalnames[attr.namespaceURI] &&\n      namespaceLocalnames[attr.namespaceURI].has(attr.localName)\n    ) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(\n        map,\n        attributeNamespace,\n        attr.prefix\n      );\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (\n          attr.value === NAMESPACES.XML ||\n          (attr.prefix === null && ignoreNamespaceDefAttr) ||\n          (attr.prefix !== null &&\n            localPrefixes[attr.localName] !== attr.value &&\n            map[attr.value].includes(attr.localName))\n        ) {\n          continue;\n        }\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\n            \"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\"\n          );\n        }\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\n            \"Namespace prefix declarations cannot be used to undeclare a namespace\"\n          );\n        }\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(\n          map,\n          attributeNamespace,\n          refs.prefixIndex++\n        );\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(\n          attributeNamespace,\n          requireWellFormed\n        )}\"`;\n      }\n    }\n\n    result += \" \";\n    if (candidatePrefix !== null) {\n      result += candidatePrefix + \":\";\n    }\n    if (\n      requireWellFormed &&\n      (attr.localName.includes(\":\") ||\n        !xnv.name(attr.localName) ||\n        (attr.localName === \"xmlns\" && attributeNamespace === null))\n    ) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n    result += `${attr.localName}=\"${serializeAttributeValue(\n      attr.value,\n      requireWellFormed\n    )}\"`;\n  }\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    asciiLowercase = _require.asciiLowercase,\n    parseNonNegativeInteger = _require.parseNonNegativeInteger;\n\nvar _require2 = require(\"../helpers/traversal\"),\n    closest = _require2.closest;\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max) {\n  var defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (attrValue === null) {\n    return defaultValue;\n  }\n\n  var parsed = parseNonNegativeInteger(attrValue);\n\n  if (parsed === null) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nvar HTMLTableCellElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLTableCellElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLTableCellElementImpl);\n\n  function HTMLTableCellElementImpl() {\n    _classCallCheck(this, HTMLTableCellElementImpl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HTMLTableCellElementImpl, [{\n    key: \"colSpan\",\n    get: function get() {\n      return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"colspan\", String(V));\n    }\n  }, {\n    key: \"rowSpan\",\n    get: function get() {\n      return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"rowspan\", String(V));\n    }\n  }, {\n    key: \"cellIndex\",\n    get: function get() {\n      var tr = closest(this, \"tr\");\n\n      if (tr === null) {\n        return -1;\n      }\n\n      return tr.cells.indexOf(this);\n    }\n  }, {\n    key: \"scope\",\n    get: function get() {\n      var value = this.getAttributeNS(null, \"scope\");\n\n      if (value === null) {\n        return \"\";\n      } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n      value = asciiLowercase(value);\n\n      if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n        return value;\n      }\n\n      return \"\";\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"scope\", V);\n    }\n  }]);\n\n  return HTMLTableCellElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"names":["HTMLElementImpl","require","implementation","asciiLowercase","parseNonNegativeInteger","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","parsed","HTMLTableCellElementImpl","getAttributeNS","V","setAttributeNS","String","tr","cells","indexOf","value","module","exports"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;eAEoDD,OAAO,CAAC,oBAAD,C;IAAnDE,c,YAAAA,c;IAAgBC,uB,YAAAA,uB;;gBACJH,OAAO,CAAC,sBAAD,C;IAAnBI,O,aAAAA,O;;AAER,SAASC,gCAAT,CAA0CC,SAA1C,EAAqDC,GAArD,EAA0DC,GAA1D,EAAiF;AAAA,MAAlBC,YAAkB,uEAAH,CAAG;;AAC/E,MAAIH,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAOG,YAAP;AACD;;AACD,MAAMC,MAAM,GAAGP,uBAAuB,CAACG,SAAD,CAAtC;;AACA,MAAII,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAOD,YAAP;AACD;;AACD,MAAIC,MAAM,GAAGH,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,MAAIG,MAAM,GAAGF,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,SAAOE,MAAP;AACD;;IAEKC,wB;;;;;;;;;;;;;wBACU;AACZ,aAAON,gCAAgC,CAAC,KAAKO,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,IAA1C,EAAgD,CAAhD,CAAvC;AACD,K;sBAEWC,C,EAAG;AACb,WAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;AACD;;;wBAEa;AACZ,aAAOR,gCAAgC,CAAC,KAAKO,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,KAA1C,EAAiD,CAAjD,CAAvC;AACD,K;sBAEWC,C,EAAG;AACb,WAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;AACD;;;wBAEe;AACd,UAAMG,EAAE,GAAGZ,OAAO,CAAC,IAAD,EAAO,IAAP,CAAlB;;AACA,UAAIY,EAAE,KAAK,IAAX,EAAiB;AACf,eAAO,CAAC,CAAR;AACD;;AAED,aAAOA,EAAE,CAACC,KAAH,CAASC,OAAT,CAAiB,IAAjB,CAAP;AACD;;;wBAEW;AACV,UAAIC,KAAK,GAAG,KAAKP,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAZ;;AACA,UAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,EAAP;AACD,OAJS,CAMV;;;AACAA,MAAAA,KAAK,GAAGjB,cAAc,CAACiB,KAAD,CAAtB;;AACA,UAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,KAA7B,IAAsCA,KAAK,KAAK,UAAhD,IAA8DA,KAAK,KAAK,UAA5E,EAAwF;AACtF,eAAOA,KAAP;AACD;;AAED,aAAO,EAAP;AACD,K;sBAESN,C,EAAG;AACX,WAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCD,CAAnC;AACD;;;;EA3CoCd,e;;AA8CvCqB,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,cAAc,EAAEU;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase, parseNonNegativeInteger } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  const parsed = parseNonNegativeInteger(attrValue);\n  if (parsed === null) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}
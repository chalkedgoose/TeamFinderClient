{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"./namespaces\"),\n    HTML_NS = _require2.HTML_NS; // All these operate on and return impls, not wrappers!\n\n\nexports.closest = function (e, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === namespace) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.childrenByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.childrenByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.firstChildWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator = _createForOfIteratorHelper(iterator),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n\n      if (child._localName === localName && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nexports.firstChildWithLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator2 = _createForOfIteratorHelper(iterator),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var child = _step2.value;\n\n      if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.treeIterator(parent);\n\n  var _iterator3 = _createForOfIteratorHelper(iterator),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var descendant = _step3.value;\n\n      if (descendant._localName === localName && descendant._namespaceURI === namespace) {\n        return descendant;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return null;\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/helpers/traversal.js"],"names":["require","domSymbolTree","HTML_NS","exports","closest","e","localName","namespace","namespaceURI","parent","childrenByLocalName","childrenToArray","filter","node","_localName","_namespaceURI","descendantsByLocalName","treeToArray","childrenByLocalNames","localNamesSet","has","descendantsByLocalNames","firstChildWithLocalName","iterator","childrenIterator","child","firstChildWithLocalNames","firstDescendantWithLocalName","treeIterator","descendant"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst { HTML_NS } = require(\"./namespaces\");\n\n// All these operate on and return impls, not wrappers!\n\nexports.closest = (e, localName, namespace = HTML_NS) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === namespace) {\n      return e;\n    }\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.childrenByLocalName = (parent, localName, namespace = HTML_NS) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === namespace;\n  } });\n};\n\nexports.descendantsByLocalName = (parent, localName, namespace = HTML_NS) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === namespace && node !== parent;\n  } });\n};\n\nexports.childrenByLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\n  } });\n};\n\nexports.descendantsByLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) &&\n           node._namespaceURI === namespace &&\n           node !== parent;\n  } });\n};\n\nexports.firstChildWithLocalName = (parent, localName, namespace = HTML_NS) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === namespace) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstChildWithLocalNames = (parent, localNamesSet, namespace = HTML_NS) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstDescendantWithLocalName = (parent, localName, namespace = HTML_NS) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === namespace) {\n      return descendant;\n    }\n  }\n  return null;\n};\n"]},"metadata":{},"sourceType":"script"}
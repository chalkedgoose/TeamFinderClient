{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MOHAM\\\\Desktop\\\\TeamFClient\\\\src\\\\Components\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport { getId } from '../../actions/postActions';\nimport { connect } from 'react-redux';\nimport './Chat.css';\nconst ENDPOINT = 'localhost:5000';\nlet socket;\n\nconst Chat = ({\n  props\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [username, setUsername] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const token = window.localStorage.getItem('token');\n  console.log(props);\n  useEffect(() => {\n    props.getId(); // console.log(props.One)\n  }, []);\n  useEffect(() => {\n    axios.get('https://jobs-xmmtw.ondigitalocean.app/login', {\n      headers: {\n        authorization: token\n      }\n    }).then(res => {\n      setUsername(res.data.name);\n      console.log(username);\n    });\n    console.log(username);\n    const {\n      room\n    } = queryString.parse(props.location.search);\n    const name = 'username';\n    socket = io(ENDPOINT);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, props.location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"g5n1RKV5I4z9IDKkNfeQr4xFhx0=\");\n\n_c = Chat;\n\nconst mapStateToProps = state => ({\n  One: state.getId.UserId\n});\n\nexport default connect(mapStateToProps, {\n  getId\n})(Chat);\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/TeamFClient/src/Components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","axios","TextContainer","Messages","InfoBar","Input","getId","connect","ENDPOINT","socket","Chat","props","name","setName","username","setUsername","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","token","window","localStorage","getItem","console","log","get","headers","authorization","then","res","data","parse","location","search","emit","error","alert","on","sendMessage","event","preventDefault","mapStateToProps","state","One","UserId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport queryString from 'query-string'\nimport io from 'socket.io-client'\nimport axios from 'axios'\nimport TextContainer from '../TextContainer/TextContainer'\nimport Messages from '../Messages/Messages'\nimport InfoBar from '../InfoBar/InfoBar'\nimport Input from '../Input/Input'\nimport { getId } from '../../actions/postActions'\nimport { connect } from 'react-redux'\n\nimport './Chat.css'\n\nconst ENDPOINT = 'localhost:5000'\n\nlet socket\n\nconst Chat = ({ props }) => {\n    const [name, setName] = useState('')\n    const [username, setUsername] = useState('')\n    const [room, setRoom] = useState('')\n    const [users, setUsers] = useState('')\n    const [message, setMessage] = useState('')\n    const [messages, setMessages] = useState([])\n    const token = window.localStorage.getItem('token')\n    console.log(props)\n    useEffect(() => {\n        props.getId()\n        // console.log(props.One)\n    }, [])\n\n    useEffect(() => {\n        axios\n            .get('https://jobs-xmmtw.ondigitalocean.app/login', {\n                headers: {\n                    authorization: token,\n                },\n            })\n            .then((res) => {\n                setUsername(res.data.name)\n                console.log(username)\n            })\n        console.log(username)\n        const { room } = queryString.parse(props.location.search)\n        const name = 'username'\n        socket = io(ENDPOINT)\n\n        setRoom(room)\n\n        socket.emit('join', { name, room }, (error) => {\n            if (error) {\n                alert(error)\n            }\n        })\n    }, [ENDPOINT, props.location.search])\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages((messages) => [...messages, message])\n        })\n\n        socket.on('roomData', ({ users }) => {\n            setUsers(users)\n        })\n    }, [])\n\n    const sendMessage = (event) => {\n        event.preventDefault()\n\n        if (message) {\n            socket.emit('sendMessage', message, () => setMessage(''))\n        }\n    }\n\n    return (\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <InfoBar room={room} />\n                <Messages messages={messages} name={name} />\n                <Input\n                    message={message}\n                    setMessage={setMessage}\n                    sendMessage={sendMessage}\n                />\n            </div>\n            <TextContainer users={users} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    One: state.getId.UserId,\n})\n\nexport default connect(mapStateToProps, { getId })(Chat)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport './One.css';\nimport io from 'socket.io-client';\nimport Messages from './Messages.js';\nimport MessageInput from './MessageInput.js';\nimport OnlineNow from './OnlineNow.js';\nimport DMWindow from './DMWindow.js';\n\nclass One extends React.Component {\n  constructor(props) {\n    super(props); // console.log('App component constructor called');\n\n    this.emitMessage = message => {\n      this.state.socket.emit('chat message', message, this.state.ourNick);\n    };\n\n    this.emitDMMessage = (toID, message) => {\n      this.state.socket.emit('DM', toID, message);\n    };\n\n    this.createNewDMWindow = IDnickPair => {\n      console.log(\"createNewDMWindow fired, IDnickPair=\", IDnickPair);\n      this.setState({\n        DMWindowData: { ...this.state.DMWindowData,\n          [IDnickPair[0]]: {\n            IDnickPair: IDnickPair,\n            messages: []\n          }\n        }\n      });\n    };\n\n    this.closeDMWindow = id => {\n      const newDMWindowData = { ...this.state.DMWindowData\n      };\n      delete newDMWindowData[id];\n      this.setState({\n        DMWindowData: newDMWindowData\n      });\n    };\n\n    this.state = {\n      messages: [],\n      //first item is the nick, second item is the message from that nick.\n      onlineNow: {\n        dummySocketID: 'dummyNick'\n      },\n      // reflects the same object held by server at any given moment. contains all active socket conncections to server. property: socket.id, value: nickname, for each connection\n      DMWindowData: {},\n      whoIsTyping: []\n    };\n  }\n\n  componentDidMount() {\n    const socket = io();\n    const ourNick = prompt(\"Please enter your nick\", \"Harry Potter\");\n    this.setState({\n      socket,\n      ourNick\n    }); // same as {socket: socket, ourNick: ourNick}\n\n    socket.emit('whose online add', ourNick);\n    socket.on('chat message', (msg, nick) => {\n      this.setState({\n        messages: this.state.messages.concat([[nick, msg]])\n      });\n    });\n    socket.on('update whose online now', userList => {\n      this.setState({\n        onlineNow: userList\n      });\n    });\n    socket.on('DM received', (fromNick, fromID, msg) => {\n      // console.log('we recieved a DM, fromNick=', fromNick, ' id=', fromID, ' msg=', msg);\n      if (fromID in this.state.DMWindowData) {\n        this.setState({\n          DMWindowData: { ...this.state.DMWindowData,\n            [fromID]: {\n              IDnickPair: [fromID, fromNick],\n              messages: [...this.state.DMWindowData[fromID].messages, [fromNick, msg]]\n            }\n          }\n        });\n      } else {\n        this.setState({\n          DMWindowData: { ...this.state.DMWindowData,\n            [fromID]: {\n              IDnickPair: [fromID, fromNick],\n              messages: [[fromNick, msg]]\n            }\n          }\n        });\n      }\n    }); // socket.on('somebody is typing', who => {\n    //   if ( this.state.whoIsTyping.includes(who) ) {\n    //     return;\n    //   } \n    //   this.setState({whoIsTyping: [...this.state.whoIsTyping, who]});\n    //   setTimeout(() => { \n    //     const newWhoIsTyping = [...this.state.whoIsTyping];\n    //     const index = newWhoIsTyping.indexOf(who);\n    //     if (index !== -1) newWhoIsTyping.splice(index, 1);\n    //     this.setState({whoIsTyping: newWhoIsTyping}) \n    //   }, 2500);\n    // });\n  } // isTypingEmit = () => {\n  //   this.state.socket.emit('is typing', this.state.ourNick);\n  // }\n  //   render() {\n  //     const DMWindowArray = [];\n  //     for (const data of Object.values(this.state.DMWindowData)) {\n  //       DMWindowArray.push(\n  //         <DMWindow \n  //           key={data.IDnickPair[0]}\n  //           IDnickPair={data.IDnickPair} \n  //           messages={data.messages} \n  //           closeButtonFunc={this.closeDMWindow}\n  //           emitDMMessageFunc={this.emitDMMessage}\n  //         />\n  //       );\n  //     }\n  //     let isTypingDiv;\n  //     if (this.state.whoIsTyping.length > 0) {\n  //       isTypingDiv = <div className=\"isTypingDiv\">{this.state.whoIsTyping.map(nick => nick + ', ')} is typing...</div>; \n  //     } else {\n  //       isTypingDiv = <div className=\"isTypingDiv\"></div>; \n  //     }\n  //     return (\n  //       <React.Fragment>\n  //       <OnlineNow userList={this.state.onlineNow} createNewDMWindowFunc={this.createNewDMWindow} />\n  //       { DMWindowArray }\n  //       { isTypingDiv }\n  //       <Messages messages={this.state.messages} />\n  //       <MessageInput emitMsgFunc={this.emitMessage} isTypingEmitFunc={this.isTypingEmit} />\n  //       </React.Fragment>\n  //     );\n  //   }\n  // }\n\n\n}\n\nexport default One;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/TeamFClient/src/One.js"],"names":["React","io","Messages","MessageInput","OnlineNow","DMWindow","One","Component","constructor","props","emitMessage","message","state","socket","emit","ourNick","emitDMMessage","toID","createNewDMWindow","IDnickPair","console","log","setState","DMWindowData","messages","closeDMWindow","id","newDMWindowData","onlineNow","dummySocketID","whoIsTyping","componentDidMount","prompt","on","msg","nick","concat","userList","fromNick","fromID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './One.css';\nimport io from 'socket.io-client';\nimport Messages from './Messages.js'; \nimport MessageInput from './MessageInput.js'; \nimport OnlineNow from './OnlineNow.js';\nimport DMWindow from './DMWindow.js';\n\nclass One extends React.Component {\n \n  constructor(props) {\n    super(props);\n    // console.log('App component constructor called');\n    this.state = {\n      messages: [], //first item is the nick, second item is the message from that nick.\n      onlineNow: {dummySocketID: 'dummyNick'}, // reflects the same object held by server at any given moment. contains all active socket conncections to server. property: socket.id, value: nickname, for each connection\n      DMWindowData: {},\n      whoIsTyping: []\n    };  \n } \n\n  componentDidMount() {\n    const socket = io();\n    const ourNick = prompt(\"Please enter your nick\", \"Harry Potter\");\n\n    this.setState({socket, ourNick}); // same as {socket: socket, ourNick: ourNick}\n\n    socket.emit('whose online add', ourNick);\n\n    socket.on('chat message', (msg, nick) => {\n      this.setState({ messages: this.state.messages.concat([[nick, msg]]) });\n    });\n\n    socket.on('update whose online now', (userList) => {\n      this.setState({ onlineNow: userList });\n    });\n\n    socket.on('DM received', (fromNick, fromID, msg) => {\n      // console.log('we recieved a DM, fromNick=', fromNick, ' id=', fromID, ' msg=', msg);\n      if (fromID in this.state.DMWindowData) {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ ...this.state.DMWindowData[fromID].messages, [fromNick, msg] ]  \n          }\n        }});\n      } else {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ [fromNick, msg] ]  \n          }\n        }});\n      }\n    });\n\n    // socket.on('somebody is typing', who => {\n\n    //   if ( this.state.whoIsTyping.includes(who) ) {\n    //     return;\n    //   } \n    \n    //   this.setState({whoIsTyping: [...this.state.whoIsTyping, who]});\n\n    //   setTimeout(() => { \n    //     const newWhoIsTyping = [...this.state.whoIsTyping];\n    //     const index = newWhoIsTyping.indexOf(who);\n    //     if (index !== -1) newWhoIsTyping.splice(index, 1);\n    //     this.setState({whoIsTyping: newWhoIsTyping}) \n    //   }, 2500);\n\n    // });\n\n  }\n\n  // isTypingEmit = () => {\n  //   this.state.socket.emit('is typing', this.state.ourNick);\n  // }\n\n\n  emitMessage = (message) => {\n    this.state.socket.emit('chat message', message, this.state.ourNick);\n  }\n\n  emitDMMessage = (toID, message) => {\n    this.state.socket.emit('DM', toID, message);\n  }\n\n  createNewDMWindow = (IDnickPair) => {\n    console.log(\"createNewDMWindow fired, IDnickPair=\", IDnickPair);\n\n    this.setState({DMWindowData: { ...this.state.DMWindowData, \n        [IDnickPair[0]]: {IDnickPair: IDnickPair, messages: []} \n    }});\n    \n  }\n\n  closeDMWindow = (id) => {\n    const newDMWindowData = {...this.state.DMWindowData};\n    delete newDMWindowData[id];\n    this.setState({DMWindowData: newDMWindowData});\n  }\n\n//   render() {\n\n//     const DMWindowArray = [];\n//     for (const data of Object.values(this.state.DMWindowData)) {\n//       DMWindowArray.push(\n//         <DMWindow \n//           key={data.IDnickPair[0]}\n//           IDnickPair={data.IDnickPair} \n//           messages={data.messages} \n//           closeButtonFunc={this.closeDMWindow}\n//           emitDMMessageFunc={this.emitDMMessage}\n//         />\n//       );\n//     }\n\n\n//     let isTypingDiv;\n\n//     if (this.state.whoIsTyping.length > 0) {\n//       isTypingDiv = <div className=\"isTypingDiv\">{this.state.whoIsTyping.map(nick => nick + ', ')} is typing...</div>; \n//     } else {\n//       isTypingDiv = <div className=\"isTypingDiv\"></div>; \n//     }\n\n\n\n//     return (\n//       <React.Fragment>\n//       <OnlineNow userList={this.state.onlineNow} createNewDMWindowFunc={this.createNewDMWindow} />\n//       { DMWindowArray }\n//       { isTypingDiv }\n//       <Messages messages={this.state.messages} />\n//       <MessageInput emitMsgFunc={this.emitMessage} isTypingEmitFunc={this.isTypingEmit} />\n//       </React.Fragment>\n//     );\n//   }\n// }\n}\nexport default One;\n"]},"metadata":{},"sourceType":"module"}
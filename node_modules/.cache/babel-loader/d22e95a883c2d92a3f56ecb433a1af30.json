{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    parseFloatingPointNumber = _require.parseFloatingPointNumber;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require2.getLabelsForLabelable;\n\nvar HTMLMeterElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLMeterElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLMeterElementImpl);\n\n  function HTMLMeterElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLMeterElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this._labels = null;\n    return _this;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  _createClass(HTMLMeterElementImpl, [{\n    key: \"_minimumValue\",\n    get: function get() {\n      var min = this.getAttributeNS(null, \"min\");\n\n      if (min !== null) {\n        var parsed = parseFloatingPointNumber(min);\n\n        if (parsed !== null) {\n          return parsed;\n        }\n      }\n\n      return 0;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n  }, {\n    key: \"_maximumValue\",\n    get: function get() {\n      var candidate = 1.0;\n      var max = this.getAttributeNS(null, \"max\");\n\n      if (max !== null) {\n        var parsed = parseFloatingPointNumber(max);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var minimumValue = this._minimumValue;\n      return candidate >= minimumValue ? candidate : minimumValue;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n  }, {\n    key: \"_actualValue\",\n    get: function get() {\n      var candidate = 0;\n      var value = this.getAttributeNS(null, \"value\");\n\n      if (value !== null) {\n        var parsed = parseFloatingPointNumber(value);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var minimumValue = this._minimumValue;\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      var maximumValue = this._maximumValue;\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n  }, {\n    key: \"_lowBoundary\",\n    get: function get() {\n      var minimumValue = this._minimumValue;\n      var candidate = minimumValue;\n      var low = this.getAttributeNS(null, \"low\");\n\n      if (low !== null) {\n        var parsed = parseFloatingPointNumber(low);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      var maximumValue = this._maximumValue;\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n  }, {\n    key: \"_highBoundary\",\n    get: function get() {\n      var maximumValue = this._maximumValue;\n      var candidate = maximumValue;\n      var high = this.getAttributeNS(null, \"high\");\n\n      if (high !== null) {\n        var parsed = parseFloatingPointNumber(high);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var lowBoundary = this._lowBoundary;\n\n      if (candidate < lowBoundary) {\n        return lowBoundary;\n      }\n\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n  }, {\n    key: \"_optimumPoint\",\n    get: function get() {\n      var minimumValue = this._minimumValue;\n      var maximumValue = this._maximumValue;\n      var candidate = (minimumValue + maximumValue) / 2;\n      var optimum = this.getAttributeNS(null, \"optimum\");\n\n      if (optimum !== null) {\n        var parsed = parseFloatingPointNumber(optimum);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      return candidate > maximumValue ? maximumValue : candidate;\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._actualValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"value\", String(val));\n    }\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._minimumValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"min\", String(val));\n    }\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._maximumValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"max\", String(val));\n    }\n  }, {\n    key: \"low\",\n    get: function get() {\n      return this._lowBoundary;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"low\", String(val));\n    }\n  }, {\n    key: \"high\",\n    get: function get() {\n      return this._highBoundary;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"high\", String(val));\n    }\n  }, {\n    key: \"optimum\",\n    get: function get() {\n      return this._optimumPoint;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"optimum\", String(val));\n    }\n  }]);\n\n  return HTMLMeterElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js"],"names":["HTMLElementImpl","require","implementation","parseFloatingPointNumber","getLabelsForLabelable","HTMLMeterElementImpl","globalObject","args","privateData","_labels","min","getAttributeNS","parsed","candidate","max","minimumValue","_minimumValue","value","maximumValue","_maximumValue","low","high","lowBoundary","_lowBoundary","optimum","_actualValue","val","setAttributeNS","String","_highBoundary","_optimumPoint","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n  get _minimumValue() {\n    const min = this.getAttributeNS(null, \"min\");\n    if (min !== null) {\n      const parsed = parseFloatingPointNumber(min);\n      if (parsed !== null) {\n        return parsed;\n      }\n    }\n    return 0;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n  get _maximumValue() {\n    let candidate = 1.0;\n\n    const max = this.getAttributeNS(null, \"max\");\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n  get _actualValue() {\n    let candidate = 0;\n\n    const value = this.getAttributeNS(null, \"value\");\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n\n    const low = this.getAttributeNS(null, \"low\");\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n\n    const high = this.getAttributeNS(null, \"high\");\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n\n    const optimum = this.getAttributeNS(null, \"optimum\");\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttributeNS(null, \"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttributeNS(null, \"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttributeNS(null, \"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttributeNS(null, \"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttributeNS(null, \"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttributeNS(null, \"optimum\", String(val));\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * Provides some utility functions for somewhat efficiently modifying a\n * collection of headers.\n *\n * Note that this class only operates on ByteStrings (which is also why we use\n * toLowerCase internally).\n */\n\nvar _toConsumableArray = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HeaderList = /*#__PURE__*/function () {\n  function HeaderList() {\n    _classCallCheck(this, HeaderList);\n\n    this.headers = new Map();\n  }\n\n  _createClass(HeaderList, [{\n    key: \"append\",\n    value: function append(name, value) {\n      var existing = this.headers.get(name.toLowerCase());\n\n      if (existing) {\n        name = existing[0].name;\n        existing.push({\n          name: name,\n          value: value\n        });\n      } else {\n        this.headers.set(name.toLowerCase(), [{\n          name: name,\n          value: value\n        }]);\n      }\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(name) {\n      return this.headers.has(name.toLowerCase());\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      name = name.toLowerCase();\n      var values = this.headers.get(name);\n\n      if (!values) {\n        return null;\n      }\n\n      return values.map(function (h) {\n        return h.value;\n      }).join(\", \");\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      this.headers.delete(name.toLowerCase());\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var lowerName = name.toLowerCase();\n      this.headers.delete(lowerName);\n      this.headers.set(lowerName, [{\n        name: name,\n        value: value\n      }]);\n    }\n  }, {\n    key: \"sortAndCombine\",\n    value: function sortAndCombine() {\n      var _this = this;\n\n      var names = _toConsumableArray(this.headers.keys()).sort();\n\n      return names.map(function (n) {\n        return [n, _this.get(n)];\n      });\n    }\n  }]);\n\n  return HeaderList;\n}();\n\nmodule.exports = HeaderList;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/fetch/header-list.js"],"names":["HeaderList","headers","Map","name","value","existing","get","toLowerCase","push","set","has","values","map","h","join","delete","lowerName","names","keys","sort","n","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;IACMA,U;AACJ,wBAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACD;;;;2BAEMC,I,EAAMC,K,EAAO;AAClB,UAAMC,QAAQ,GAAG,KAAKJ,OAAL,CAAaK,GAAb,CAAiBH,IAAI,CAACI,WAAL,EAAjB,CAAjB;;AACA,UAAIF,QAAJ,EAAc;AACZF,QAAAA,IAAI,GAAGE,QAAQ,CAAC,CAAD,CAAR,CAAYF,IAAnB;AACAE,QAAAA,QAAQ,CAACG,IAAT,CAAc;AAAEL,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,KAAK,EAALA;AAAR,SAAd;AACD,OAHD,MAGO;AACL,aAAKH,OAAL,CAAaQ,GAAb,CAAiBN,IAAI,CAACI,WAAL,EAAjB,EAAqC,CAAC;AAAEJ,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,KAAK,EAALA;AAAR,SAAD,CAArC;AACD;AACF;;;6BAEQD,I,EAAM;AACb,aAAO,KAAKF,OAAL,CAAaS,GAAb,CAAiBP,IAAI,CAACI,WAAL,EAAjB,CAAP;AACD;;;wBAEGJ,I,EAAM;AACRA,MAAAA,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;AACA,UAAMI,MAAM,GAAG,KAAKV,OAAL,CAAaK,GAAb,CAAiBH,IAAjB,CAAf;;AACA,UAAI,CAACQ,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AACD,aAAOA,MAAM,CAACC,GAAP,CAAW,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACT,KAAN;AAAA,OAAZ,EAAyBU,IAAzB,CAA8B,IAA9B,CAAP;AACD;;;4BAEMX,I,EAAM;AACX,WAAKF,OAAL,CAAac,MAAb,CAAoBZ,IAAI,CAACI,WAAL,EAApB;AACD;;;wBAEGJ,I,EAAMC,K,EAAO;AACf,UAAMY,SAAS,GAAGb,IAAI,CAACI,WAAL,EAAlB;AACA,WAAKN,OAAL,CAAac,MAAb,CAAoBC,SAApB;AACA,WAAKf,OAAL,CAAaQ,GAAb,CAAiBO,SAAjB,EAA4B,CAAC;AAAEb,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,KAAK,EAALA;AAAR,OAAD,CAA5B;AACD;;;qCAEgB;AAAA;;AACf,UAAMa,KAAK,GAAG,mBAAI,KAAKhB,OAAL,CAAaiB,IAAb,EAAJ,EAAyBC,IAAzB,EAAd;;AACA,aAAOF,KAAK,CAACL,GAAN,CAAU,UAAAQ,CAAC;AAAA,eAAI,CAACA,CAAD,EAAI,KAAI,CAACd,GAAL,CAASc,CAAT,CAAJ,CAAJ;AAAA,OAAX,CAAP;AACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Provides some utility functions for somewhat efficiently modifying a\n * collection of headers.\n *\n * Note that this class only operates on ByteStrings (which is also why we use\n * toLowerCase internally).\n */\nclass HeaderList {\n  constructor() {\n    this.headers = new Map();\n  }\n\n  append(name, value) {\n    const existing = this.headers.get(name.toLowerCase());\n    if (existing) {\n      name = existing[0].name;\n      existing.push({ name, value });\n    } else {\n      this.headers.set(name.toLowerCase(), [{ name, value }]);\n    }\n  }\n\n  contains(name) {\n    return this.headers.has(name.toLowerCase());\n  }\n\n  get(name) {\n    name = name.toLowerCase();\n    const values = this.headers.get(name);\n    if (!values) {\n      return null;\n    }\n    return values.map(h => h.value).join(\", \");\n  }\n\n  delete(name) {\n    this.headers.delete(name.toLowerCase());\n  }\n\n  set(name, value) {\n    const lowerName = name.toLowerCase();\n    this.headers.delete(lowerName);\n    this.headers.set(lowerName, [{ name, value }]);\n  }\n\n  sortAndCombine() {\n    const names = [...this.headers.keys()].sort();\n    return names.map(n => [n, this.get(n)]);\n  }\n}\n\nmodule.exports = HeaderList;\n"]},"metadata":{},"sourceType":"script"}
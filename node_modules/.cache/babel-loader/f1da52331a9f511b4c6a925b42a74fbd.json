{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\MOHAM\\\\Desktop\\\\TeamFClient\\\\src\\\\One.js\";\nimport React from 'react';\nimport './One.css';\nimport io from 'socket.io-client';\nimport Messages from './Messages.js';\nimport MessageInput from './MessageInput.js';\nimport OnlineNow from './OnlineNow.js';\nimport DMWindow from './DMWindow.js';\n\nclass One extends React.Component {\n  constructor(props) {\n    super(props); // console.log('App component constructor called');\n\n    this.isTypingEmit = () => {\n      this.state.socket.emit('is typing', this.state.ourNick);\n    };\n\n    this.emitMessage = message => {\n      this.state.socket.emit('chat message', message, this.state.ourNick);\n    };\n\n    this.emitDMMessage = (toID, message) => {\n      this.state.socket.emit('DM', toID, message);\n    };\n\n    this.createNewDMWindow = IDnickPair => {\n      console.log(\"createNewDMWindow fired, IDnickPair=\", IDnickPair);\n      this.setState({\n        DMWindowData: { ...this.state.DMWindowData,\n          [IDnickPair[0]]: {\n            IDnickPair: IDnickPair,\n            messages: []\n          }\n        }\n      });\n    };\n\n    this.closeDMWindow = id => {\n      const newDMWindowData = { ...this.state.DMWindowData\n      };\n      delete newDMWindowData[id];\n      this.setState({\n        DMWindowData: newDMWindowData\n      });\n    };\n\n    this.state = {\n      messages: [],\n      //first item is the nick, second item is the message from that nick.\n      onlineNow: {\n        dummySocketID: 'dummyNick'\n      },\n      // reflects the same object held by server at any given moment. contains all active socket conncections to server. property: socket.id, value: nickname, for each connection\n      DMWindowData: {},\n      whoIsTyping: []\n    };\n  }\n\n  componentDidMount() {\n    const socket = io();\n    const ourNick = prompt(\"Please enter your nick\", \"Harry Potter\");\n    this.setState({\n      socket,\n      ourNick\n    }); // same as {socket: socket, ourNick: ourNick}\n\n    socket.emit('whose online add', ourNick);\n    socket.on('chat message', (msg, nick) => {\n      this.setState({\n        messages: this.state.messages.concat([[nick, msg]])\n      });\n    });\n    socket.on('update whose online now', userList => {\n      this.setState({\n        onlineNow: userList\n      });\n    });\n    socket.on('DM received', (fromNick, fromID, msg) => {\n      // console.log('we recieved a DM, fromNick=', fromNick, ' id=', fromID, ' msg=', msg);\n      if (fromID in this.state.DMWindowData) {\n        this.setState({\n          DMWindowData: { ...this.state.DMWindowData,\n            [fromID]: {\n              IDnickPair: [fromID, fromNick],\n              messages: [...this.state.DMWindowData[fromID].messages, [fromNick, msg]]\n            }\n          }\n        });\n      } else {\n        this.setState({\n          DMWindowData: { ...this.state.DMWindowData,\n            [fromID]: {\n              IDnickPair: [fromID, fromNick],\n              messages: [[fromNick, msg]]\n            }\n          }\n        });\n      }\n    });\n    socket.on('somebody is typing', who => {\n      if (this.state.whoIsTyping.includes(who)) {\n        return;\n      }\n\n      this.setState({\n        whoIsTyping: [...this.state.whoIsTyping, who]\n      });\n      setTimeout(() => {\n        const newWhoIsTyping = [...this.state.whoIsTyping];\n        const index = newWhoIsTyping.indexOf(who);\n        if (index !== -1) newWhoIsTyping.splice(index, 1);\n        this.setState({\n          whoIsTyping: newWhoIsTyping\n        });\n      }, 2500);\n    });\n  }\n\n  render() {\n    const DMWindowArray = [];\n\n    for (const data of Object.values(this.state.DMWindowData)) {\n      DMWindowArray.push( /*#__PURE__*/_jsxDEV(DMWindow, {\n        IDnickPair: data.IDnickPair,\n        messages: data.messages,\n        closeButtonFunc: this.closeDMWindow,\n        emitDMMessageFunc: this.emitDMMessage\n      }, data.IDnickPair[0], false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this));\n    }\n\n    let isTypingDiv;\n\n    if (this.state.whoIsTyping.length > 0) {\n      isTypingDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isTypingDiv\",\n        children: [this.state.whoIsTyping.map(nick => nick + ', '), \" is typing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this);\n    } else {\n      isTypingDiv = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isTypingDiv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(OnlineNow, {\n        userList: this.state.onlineNow,\n        createNewDMWindowFunc: this.createNewDMWindow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this), DMWindowArray, isTypingDiv, /*#__PURE__*/_jsxDEV(Messages, {\n        messages: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        emitMsgFunc: this.emitMessage,\n        isTypingEmitFunc: this.isTypingEmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default One;","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/TeamFClient/src/One.js"],"names":["React","io","Messages","MessageInput","OnlineNow","DMWindow","One","Component","constructor","props","isTypingEmit","state","socket","emit","ourNick","emitMessage","message","emitDMMessage","toID","createNewDMWindow","IDnickPair","console","log","setState","DMWindowData","messages","closeDMWindow","id","newDMWindowData","onlineNow","dummySocketID","whoIsTyping","componentDidMount","prompt","on","msg","nick","concat","userList","fromNick","fromID","who","includes","setTimeout","newWhoIsTyping","index","indexOf","splice","render","DMWindowArray","data","Object","values","push","isTypingDiv","length","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './One.css';\nimport io from 'socket.io-client';\nimport Messages from './Messages.js'; \nimport MessageInput from './MessageInput.js'; \nimport OnlineNow from './OnlineNow.js';\nimport DMWindow from './DMWindow.js';\n\nclass One extends React.Component {\n \n  constructor(props) {\n    super(props);\n    // console.log('App component constructor called');\n    this.state = {\n      messages: [], //first item is the nick, second item is the message from that nick.\n      onlineNow: {dummySocketID: 'dummyNick'}, // reflects the same object held by server at any given moment. contains all active socket conncections to server. property: socket.id, value: nickname, for each connection\n      DMWindowData: {},\n      whoIsTyping: []\n    };  \n } \n\n  componentDidMount() {\n    const socket = io();\n    const ourNick = prompt(\"Please enter your nick\", \"Harry Potter\");\n\n    this.setState({socket, ourNick}); // same as {socket: socket, ourNick: ourNick}\n\n    socket.emit('whose online add', ourNick);\n\n    socket.on('chat message', (msg, nick) => {\n      this.setState({ messages: this.state.messages.concat([[nick, msg]]) });\n    });\n\n    socket.on('update whose online now', (userList) => {\n      this.setState({ onlineNow: userList });\n    });\n\n    socket.on('DM received', (fromNick, fromID, msg) => {\n      // console.log('we recieved a DM, fromNick=', fromNick, ' id=', fromID, ' msg=', msg);\n      if (fromID in this.state.DMWindowData) {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ ...this.state.DMWindowData[fromID].messages, [fromNick, msg] ]  \n          }\n        }});\n      } else {\n        this.setState({DMWindowData: {...this.state.DMWindowData, \n          [fromID]: { IDnickPair: [fromID, fromNick], \n                     messages: [ [fromNick, msg] ]  \n          }\n        }});\n      }\n    });\n\n    socket.on('somebody is typing', who => {\n\n      if ( this.state.whoIsTyping.includes(who) ) {\n        return;\n      } \n    \n      this.setState({whoIsTyping: [...this.state.whoIsTyping, who]});\n\n      setTimeout(() => { \n        const newWhoIsTyping = [...this.state.whoIsTyping];\n        const index = newWhoIsTyping.indexOf(who);\n        if (index !== -1) newWhoIsTyping.splice(index, 1);\n        this.setState({whoIsTyping: newWhoIsTyping}) \n      }, 2500);\n\n    });\n\n  }\n\n  isTypingEmit = () => {\n    this.state.socket.emit('is typing', this.state.ourNick);\n  }\n\n\n  emitMessage = (message) => {\n    this.state.socket.emit('chat message', message, this.state.ourNick);\n  }\n\n  emitDMMessage = (toID, message) => {\n    this.state.socket.emit('DM', toID, message);\n  }\n\n  createNewDMWindow = (IDnickPair) => {\n    console.log(\"createNewDMWindow fired, IDnickPair=\", IDnickPair);\n\n    this.setState({DMWindowData: { ...this.state.DMWindowData, \n        [IDnickPair[0]]: {IDnickPair: IDnickPair, messages: []} \n    }});\n    \n  }\n\n  closeDMWindow = (id) => {\n    const newDMWindowData = {...this.state.DMWindowData};\n    delete newDMWindowData[id];\n    this.setState({DMWindowData: newDMWindowData});\n  }\n\n  render() {\n\n    const DMWindowArray = [];\n    for (const data of Object.values(this.state.DMWindowData)) {\n      DMWindowArray.push(\n        <DMWindow \n          key={data.IDnickPair[0]}\n          IDnickPair={data.IDnickPair} \n          messages={data.messages} \n          closeButtonFunc={this.closeDMWindow}\n          emitDMMessageFunc={this.emitDMMessage}\n        />\n      );\n    }\n\n\n    let isTypingDiv;\n\n    if (this.state.whoIsTyping.length > 0) {\n      isTypingDiv = <div className=\"isTypingDiv\">{this.state.whoIsTyping.map(nick => nick + ', ')} is typing...</div>; \n    } else {\n      isTypingDiv = <div className=\"isTypingDiv\"></div>; \n    }\n\n\n\n    return (\n      <React.Fragment>\n      <OnlineNow userList={this.state.onlineNow} createNewDMWindowFunc={this.createNewDMWindow} />\n      { DMWindowArray }\n      { isTypingDiv }\n      <Messages messages={this.state.messages} />\n      <MessageInput emitMsgFunc={this.emitMessage} isTypingEmitFunc={this.isTypingEmit} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default One;\n"]},"metadata":{},"sourceType":"module"}
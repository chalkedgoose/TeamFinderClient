{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"./strings\"),\n    parseFloatingPointNumber = _require.parseFloatingPointNumber;\n\nvar _require2 = require(\"./dates-and-times\"),\n    parseDateString = _require2.parseDateString,\n    parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,\n    parseMonthString = _require2.parseMonthString,\n    parseTimeString = _require2.parseTimeString,\n    parseWeekString = _require2.parseWeekString,\n    serializeDate = _require2.serializeDate,\n    serializeMonth = _require2.serializeMonth,\n    serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime,\n    serializeTime = _require2.serializeTime,\n    serializeWeek = _require2.serializeWeek,\n    parseDateAsWeek = _require2.parseDateAsWeek; // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year) {\n  var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  var d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nvar dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nexports.convertStringToNumberByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date: function date(input) {\n    var date = parseDateString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return getUTCMs(date.year, date.month, date.day);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month: function month(input) {\n    var date = parseMonthString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return (date.year - 1970) * 12 + (date.month - 1);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n  week: function week(input) {\n    var date = parseWeekString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    var dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n    var dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n  time: function time(input) {\n    var time = parseTimeString(input);\n\n    if (time === null) {\n      return null;\n    }\n\n    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n  \"datetime-local\": function datetimeLocal(input) {\n    var dateAndTime = parseLocalDateAndTimeString(input);\n\n    if (dateAndTime === null) {\n      return null;\n    }\n\n    var _dateAndTime$date = dateAndTime.date,\n        year = _dateAndTime$date.year,\n        month = _dateAndTime$date.month,\n        day = _dateAndTime$date.day,\n        _dateAndTime$time = dateAndTime.time,\n        hour = _dateAndTime$time.hour,\n        minute = _dateAndTime$time.minute,\n        second = _dateAndTime$time.second,\n        millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n    return getUTCMs(year, month, day, hour, minute, second, millisecond);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  number: parseFloatingPointNumber,\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  range: parseFloatingPointNumber\n};\nexports.convertStringToDateByType = {\n  date: function date(input) {\n    var parsedInput = exports.convertStringToNumberByType.date(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month: function month(input) {\n    var parsedMonthString = parseMonthString(input);\n\n    if (parsedMonthString === null) {\n      return null;\n    }\n\n    var date = new Date(0);\n    date.setUTCFullYear(parsedMonthString.year);\n    date.setUTCMonth(parsedMonthString.month - 1);\n    return date;\n  },\n  week: function week(input) {\n    var parsedInput = exports.convertStringToNumberByType.week(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  time: function time(input) {\n    var parsedInput = exports.convertStringToNumberByType.time(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  \"datetime-local\": function datetimeLocal(input) {\n    var parsedInput = exports.convertStringToNumberByType[\"datetime-local\"](input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  }\n};\nexports.serializeDateByType = {\n  date: function date(input) {\n    return serializeDate({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1,\n      day: input.getUTCDate()\n    });\n  },\n  month: function month(input) {\n    return serializeMonth({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1\n    });\n  },\n  week: function week(input) {\n    return serializeWeek(parseDateAsWeek(input));\n  },\n  time: function time(input) {\n    return serializeTime({\n      hour: input.getUTCHours(),\n      minute: input.getUTCMinutes(),\n      second: input.getUTCSeconds(),\n      millisecond: input.getUTCMilliseconds()\n    });\n  },\n  \"datetime-local\": function datetimeLocal(input) {\n    return serializeNormalizedDateAndTime({\n      date: {\n        year: input.getUTCFullYear(),\n        month: input.getUTCMonth() + 1,\n        day: input.getUTCDate()\n      },\n      time: {\n        hour: input.getUTCHours(),\n        minute: input.getUTCMinutes(),\n        second: input.getUTCSeconds(),\n        millisecond: input.getUTCMilliseconds()\n      }\n    });\n  }\n};\nexports.convertNumberToStringByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date: function date(input) {\n    return exports.serializeDateByType.date(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date\n  month: function month(input) {\n    var year = 1970 + Math.floor(input / 12);\n    var month = input % 12;\n    var date = new Date(0);\n    date.setUTCFullYear(year);\n    date.setUTCMonth(month);\n    return exports.serializeDateByType.month(date);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date\n  week: function week(input) {\n    return exports.serializeDateByType.week(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date\n  time: function time(input) {\n    return exports.serializeDateByType.time(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string\n  \"datetime-local\": function datetimeLocal(input) {\n    return exports.serializeDateByType[\"datetime-local\"](new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string\n  number: function number(input) {\n    return input.toString();\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string\n  range: function range(input) {\n    return input.toString();\n  }\n};","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/helpers/number-and-date-inputs.js"],"names":["require","parseFloatingPointNumber","parseDateString","parseLocalDateAndTimeString","parseMonthString","parseTimeString","parseWeekString","serializeDate","serializeMonth","serializeNormalizedDateAndTime","serializeTime","serializeWeek","parseDateAsWeek","getUTCMs","year","month","day","hour","minute","second","millisecond","Date","UTC","d","setUTCFullYear","setUTCMonth","setUTCDate","setUTCHours","setUTCMinutes","setUTCSeconds","valueOf","dayOfWeekRelMondayLUT","exports","convertStringToNumberByType","date","input","week","dateObj","dayOfWeekRelMonday","getUTCDay","time","dateAndTime","number","range","convertStringToDateByType","parsedInput","parsedMonthString","serializeDateByType","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","convertNumberToStringByType","Math","floor","toString"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { parseFloatingPointNumber } = require(\"./strings\");\nconst {\n  parseDateString,\n  parseLocalDateAndTimeString,\n  parseMonthString,\n  parseTimeString,\n  parseWeekString,\n\n  serializeDate,\n  serializeMonth,\n  serializeNormalizedDateAndTime,\n  serializeTime,\n  serializeWeek,\n  parseDateAsWeek\n} = require(\"./dates-and-times\");\n\n// Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\n\nexports.convertStringToNumberByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    const date = parseDateString(input);\n    if (date === null) {\n      return null;\n    }\n    return getUTCMs(date.year, date.month, date.day);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const date = parseMonthString(input);\n    if (date === null) {\n      return null;\n    }\n    return (date.year - 1970) * 12 + (date.month - 1);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n  week(input) {\n    const date = parseWeekString(input);\n    if (date === null) {\n      return null;\n    }\n    const dateObj = new Date(getUTCMs(date.year));\n    // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n    const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n  time(input) {\n    const time = parseTimeString(input);\n    if (time === null) {\n      return null;\n    }\n    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n  \"datetime-local\"(input) {\n    const dateAndTime = parseLocalDateAndTimeString(input);\n    if (dateAndTime === null) {\n      return null;\n    }\n    const { date: { year, month, day }, time: { hour, minute, second, millisecond } } = dateAndTime;\n    // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n    return getUTCMs(year, month, day, hour, minute, second, millisecond);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  number: parseFloatingPointNumber,\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  range: parseFloatingPointNumber\n};\n\nexports.convertStringToDateByType = {\n  date(input) {\n    const parsedInput = exports.convertStringToNumberByType.date(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const parsedMonthString = parseMonthString(input);\n    if (parsedMonthString === null) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCFullYear(parsedMonthString.year);\n    date.setUTCMonth(parsedMonthString.month - 1);\n    return date;\n  },\n  week(input) {\n    const parsedInput = exports.convertStringToNumberByType.week(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  time(input) {\n    const parsedInput = exports.convertStringToNumberByType.time(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  \"datetime-local\"(input) {\n    const parsedInput = exports.convertStringToNumberByType[\"datetime-local\"](input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  }\n};\n\nexports.serializeDateByType = {\n  date(input) {\n    return serializeDate({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1,\n      day: input.getUTCDate()\n    });\n  },\n  month(input) {\n    return serializeMonth({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1\n    });\n  },\n  week(input) {\n    return serializeWeek(parseDateAsWeek(input));\n  },\n  time(input) {\n    return serializeTime({\n      hour: input.getUTCHours(),\n      minute: input.getUTCMinutes(),\n      second: input.getUTCSeconds(),\n      millisecond: input.getUTCMilliseconds()\n    });\n  },\n  \"datetime-local\"(input) {\n    return serializeNormalizedDateAndTime({\n      date: {\n        year: input.getUTCFullYear(),\n        month: input.getUTCMonth() + 1,\n        day: input.getUTCDate()\n      },\n      time: {\n        hour: input.getUTCHours(),\n        minute: input.getUTCMinutes(),\n        second: input.getUTCSeconds(),\n        millisecond: input.getUTCMilliseconds()\n      }\n    });\n  }\n};\n\nexports.convertNumberToStringByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    return exports.serializeDateByType.date(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date\n  month(input) {\n    const year = 1970 + Math.floor(input / 12);\n    const month = input % 12;\n    const date = new Date(0);\n    date.setUTCFullYear(year);\n    date.setUTCMonth(month);\n\n    return exports.serializeDateByType.month(date);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date\n  week(input) {\n    return exports.serializeDateByType.week(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date\n  time(input) {\n    return exports.serializeDateByType.time(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string\n  \"datetime-local\"(input) {\n    return exports.serializeDateByType[\"datetime-local\"](new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string\n  number(input) {\n    return input.toString();\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string\n  range(input) {\n    return input.toString();\n  }\n};\n"]},"metadata":{},"sourceType":"script"}
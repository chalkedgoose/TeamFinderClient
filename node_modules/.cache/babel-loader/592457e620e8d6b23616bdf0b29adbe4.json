{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar _require = require(\"./helpers\"),\n    filter = _require.filter,\n    FILTER_ACCEPT = _require.FILTER_ACCEPT,\n    FILTER_REJECT = _require.FILTER_REJECT,\n    FILTER_SKIP = _require.FILTER_SKIP;\n\nvar FIRST = false;\nvar LAST = true;\nvar NEXT = false;\nvar PREVIOUS = true;\n\nexports.implementation = /*#__PURE__*/function () {\n  function TreeWalkerImpl(globalObject, args, privateData) {\n    _classCallCheck(this, TreeWalkerImpl);\n\n    this._active = false;\n    this.root = privateData.root;\n    this.currentNode = this.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._globalObject = globalObject;\n  }\n\n  _createClass(TreeWalkerImpl, [{\n    key: \"parentNode\",\n    value: function parentNode() {\n      var node = this._currentNode;\n\n      while (node !== null && node !== this.root) {\n        node = node.parentNode;\n\n        if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"firstChild\",\n    value: function firstChild() {\n      return this._traverseChildren(FIRST);\n    }\n  }, {\n    key: \"lastChild\",\n    value: function lastChild() {\n      return this._traverseChildren(LAST);\n    }\n  }, {\n    key: \"previousSibling\",\n    value: function previousSibling() {\n      return this._traverseSiblings(PREVIOUS);\n    }\n  }, {\n    key: \"nextSibling\",\n    value: function nextSibling() {\n      return this._traverseSiblings(NEXT);\n    }\n  }, {\n    key: \"previousNode\",\n    value: function previousNode() {\n      var node = this._currentNode;\n\n      while (node !== this.root) {\n        var sibling = node.previousSibling;\n\n        while (sibling !== null) {\n          node = sibling;\n          var result = filter(this, node);\n\n          while (result !== FILTER_REJECT && node.hasChildNodes()) {\n            node = node.lastChild;\n            result = filter(this, node);\n          }\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n\n          sibling = node.previousSibling;\n        }\n\n        if (node === this.root || node.parentNode === null) {\n          return null;\n        }\n\n        node = node.parentNode;\n\n        if (filter(this, node) === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"nextNode\",\n    value: function nextNode() {\n      var node = this._currentNode;\n      var result = FILTER_ACCEPT;\n\n      for (;;) {\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.firstChild;\n          result = filter(this, node);\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n        }\n\n        do {\n          if (node === this.root) {\n            return null;\n          }\n\n          var sibling = node.nextSibling;\n\n          if (sibling !== null) {\n            node = sibling;\n            break;\n          }\n\n          node = node.parentNode;\n        } while (node !== null);\n\n        if (node === null) {\n          return null;\n        }\n\n        result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n    }\n  }, {\n    key: \"_traverseChildren\",\n    value: function _traverseChildren(type) {\n      var node = this._currentNode;\n      node = type === FIRST ? node.firstChild : node.lastChild;\n\n      if (node === null) {\n        return null;\n      }\n\n      main: for (;;) {\n        var result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n\n        if (result === FILTER_SKIP) {\n          var child = type === FIRST ? node.firstChild : node.lastChild;\n\n          if (child !== null) {\n            node = child;\n            continue;\n          }\n        }\n\n        for (;;) {\n          var sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n          if (sibling !== null) {\n            node = sibling;\n            continue main;\n          }\n\n          var parent = node.parentNode;\n\n          if (parent === null || parent === this.root || parent === this._currentNode) {\n            return null;\n          }\n\n          node = parent;\n        }\n      }\n    }\n  }, {\n    key: \"_traverseSiblings\",\n    value: function _traverseSiblings(type) {\n      var node = this._currentNode;\n\n      if (node === this.root) {\n        return null;\n      }\n\n      for (;;) {\n        var sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n        while (sibling !== null) {\n          node = sibling;\n          var result = filter(this, node);\n\n          if (result === FILTER_ACCEPT) {\n            return this._currentNode = node;\n          }\n\n          sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n          if (result === FILTER_REJECT || sibling === null) {\n            sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n          }\n        }\n\n        node = node.parentNode;\n\n        if (node === null || node === this.root) {\n          return null;\n        }\n\n        if (filter(this, node) === FILTER_ACCEPT) {\n          return null;\n        }\n      }\n    }\n  }, {\n    key: \"currentNode\",\n    get: function get() {\n      return this._currentNode;\n    },\n    set: function set(node) {\n      if (node === null) {\n        throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\n      }\n\n      this._currentNode = node;\n    }\n  }]);\n\n  return TreeWalkerImpl;\n}();","map":{"version":3,"sources":["C:/Users/MOHAM/Desktop/Team-Finder-Client/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker-impl.js"],"names":["DOMException","require","filter","FILTER_ACCEPT","FILTER_REJECT","FILTER_SKIP","FIRST","LAST","NEXT","PREVIOUS","exports","implementation","globalObject","args","privateData","_active","root","currentNode","whatToShow","_globalObject","node","_currentNode","parentNode","_traverseChildren","_traverseSiblings","sibling","previousSibling","result","hasChildNodes","lastChild","firstChild","nextSibling","type","main","child","parent","create"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { filter, FILTER_ACCEPT, FILTER_REJECT, FILTER_SKIP } = require(\"./helpers\");\n\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\n\nexports.implementation = class TreeWalkerImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.currentNode = this.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this._globalObject = globalObject;\n  }\n\n  get currentNode() {\n    return this._currentNode;\n  }\n\n  set currentNode(node) {\n    if (node === null) {\n      throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\n    }\n\n    this._currentNode = node;\n  }\n\n  parentNode() {\n    let node = this._currentNode;\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n    return null;\n  }\n\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n\n  previousNode() {\n    let node = this._currentNode;\n\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = node.previousSibling;\n      }\n\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n\n      node = node.parentNode;\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n\n    return null;\n  }\n\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n      }\n\n      do {\n        if (node === this.root) {\n          return null;\n        }\n\n        const sibling = node.nextSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n\n        node = node.parentNode;\n      } while (node !== null);\n\n      if (node === null) {\n        return null;\n      }\n\n      result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n  }\n\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n\n    if (node === null) {\n      return null;\n    }\n\n    main: for (;;) {\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n\n        const parent = node.parentNode;\n\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n\n        node = parent;\n      }\n    }\n  }\n\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n\n    if (node === this.root) {\n      return null;\n    }\n\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n\n      node = node.parentNode;\n\n      if (node === null || node === this.root) {\n        return null;\n      }\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}